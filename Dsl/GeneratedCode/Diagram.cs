//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Company.DSLBootstrap.DSLBootstrapDiagram")]

namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass DSLBootstrapDiagram
	/// Description for Company.DSLBootstrap.DSLBootstrapDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.DSLBootstrapDiagram.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.DSLBootstrapDiagram.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("734dec8c-cd91-4d23-bc72-9ac9098adf24")]
	public partial class DSLBootstrapDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Company.DSLBootstrap.DSLBootstrapToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Company.DSLBootstrap.InnerBonito)
			{
				global::Company.DSLBootstrap.FinnerBonito newShape = new global::Company.DSLBootstrap.FinnerBonito(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.FormularioBonito)
			{
				global::Company.DSLBootstrap.FFormularioBonito newShape = new global::Company.DSLBootstrap.FFormularioBonito(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.TableBonita)
			{
				global::Company.DSLBootstrap.FTableBonita newShape = new global::Company.DSLBootstrap.FTableBonita(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.InnerFormal)
			{
				global::Company.DSLBootstrap.FinnerFormal newShape = new global::Company.DSLBootstrap.FinnerFormal(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.FormularioFormal)
			{
				global::Company.DSLBootstrap.FFormularioFormal newShape = new global::Company.DSLBootstrap.FFormularioFormal(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.TableFormal)
			{
				global::Company.DSLBootstrap.FTableFormal newShape = new global::Company.DSLBootstrap.FTableFormal(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.EditButton)
			{
				global::Company.DSLBootstrap.Fbutton newShape = new global::Company.DSLBootstrap.Fbutton(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Barradeprogreso)
			{
				global::Company.DSLBootstrap.FBarradeprogreso newShape = new global::Company.DSLBootstrap.FBarradeprogreso(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.CheckBox)
			{
				global::Company.DSLBootstrap.FCheckBox newShape = new global::Company.DSLBootstrap.FCheckBox(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Etiquetas)
			{
				global::Company.DSLBootstrap.FEtiqueta newShape = new global::Company.DSLBootstrap.FEtiqueta(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.EditItem)
			{
				global::Company.DSLBootstrap.FEditItem newShape = new global::Company.DSLBootstrap.FEditItem(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.RadioButton)
			{
				global::Company.DSLBootstrap.FRadioButton newShape = new global::Company.DSLBootstrap.FRadioButton(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.TextRow)
			{
				global::Company.DSLBootstrap.FTextRow newShape = new global::Company.DSLBootstrap.FTextRow(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Columnas)
			{
				global::Company.DSLBootstrap.FColumna newShape = new global::Company.DSLBootstrap.FColumna(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Select)
			{
				global::Company.DSLBootstrap.FSelect newShape = new global::Company.DSLBootstrap.FSelect(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Entrada)
			{
				global::Company.DSLBootstrap.Fentrada newShape = new global::Company.DSLBootstrap.Fentrada(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ButtonSuccess)
			{
				global::Company.DSLBootstrap.FButtonSuccess newShape = new global::Company.DSLBootstrap.FButtonSuccess(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.EntradaEmail)
			{
				global::Company.DSLBootstrap.FEntradaEmail newShape = new global::Company.DSLBootstrap.FEntradaEmail(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ColumnaRenglon)
			{
				global::Company.DSLBootstrap.FColumnaRenglon newShape = new global::Company.DSLBootstrap.FColumnaRenglon(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ButtonPrimary)
			{
				global::Company.DSLBootstrap.FButtonPrimary newShape = new global::Company.DSLBootstrap.FButtonPrimary(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.EntradaPassword)
			{
				global::Company.DSLBootstrap.FEntradaPassword newShape = new global::Company.DSLBootstrap.FEntradaPassword(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ButtonDanger)
			{
				global::Company.DSLBootstrap.FButtonDanger newShape = new global::Company.DSLBootstrap.FButtonDanger(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.Renglones)
			{
				global::Company.DSLBootstrap.FRenglon newShape = new global::Company.DSLBootstrap.FRenglon(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ButtonInfo)
			{
				global::Company.DSLBootstrap.FButtonInfo newShape = new global::Company.DSLBootstrap.FButtonInfo(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.DSLBootstrap.ButtonWarning)
			{
				global::Company.DSLBootstrap.FButtonWarning newShape = new global::Company.DSLBootstrap.FButtonWarning(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Company.DSLBootstrap.FEditItem.DecoratorsInitialized += FEditItemDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.Fbutton.DecoratorsInitialized += FbuttonDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FBarradeprogreso.DecoratorsInitialized += FBarradeprogresoDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FEtiqueta.DecoratorsInitialized += FEtiquetaDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.Fentrada.DecoratorsInitialized += FentradaDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FCheckBox.DecoratorsInitialized += FCheckBoxDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FRadioButton.DecoratorsInitialized += FRadioButtonDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FTextRow.DecoratorsInitialized += FTextRowDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FFormularioFormal.DecoratorsInitialized += FFormularioFormalDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FFormularioBonito.DecoratorsInitialized += FFormularioBonitoDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FinnerFormal.DecoratorsInitialized += FinnerFormalDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FColumna.DecoratorsInitialized += FColumnaDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FColumnaRenglon.DecoratorsInitialized += FColumnaRenglonDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FTableBonita.DecoratorsInitialized += FTableBonitaDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FTableFormal.DecoratorsInitialized += FTableFormalDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FButtonPrimary.DecoratorsInitialized += FButtonPrimaryDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FButtonDanger.DecoratorsInitialized += FButtonDangerDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FButtonInfo.DecoratorsInitialized += FButtonInfoDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FButtonWarning.DecoratorsInitialized += FButtonWarningDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FButtonSuccess.DecoratorsInitialized += FButtonSuccessDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FEntradaEmail.DecoratorsInitialized += FEntradaEmailDecoratorMap.OnDecoratorsInitialized;
			global::Company.DSLBootstrap.FEntradaPassword.DecoratorsInitialized += FEntradaPasswordDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FEditItem.
		/// </summary>
		internal static partial class FEditItemDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FEditItem.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EditItem.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for Fbutton.
		/// </summary>
		internal static partial class FbuttonDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for Fbutton.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EditButton.EditColorDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextColor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EditButton.IconDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextIcon").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EditButton.onClickDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextOnClick").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EditButton.TextNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FBarradeprogreso.
		/// </summary>
		internal static partial class FBarradeprogresoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FBarradeprogreso.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Barradeprogreso.EditColorDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextColor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Barradeprogreso.MaxDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextMax").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Barradeprogreso.MinDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextMin").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Barradeprogreso.EditColorDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextColor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Barradeprogreso.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FEtiqueta.
		/// </summary>
		internal static partial class FEtiquetaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FEtiqueta.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Etiquetas.EditColorDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextColor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Etiquetas.EstiloLetraDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextEstilo").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Etiquetas.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Etiquetas.OutputDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextOutput").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for Fentrada.
		/// </summary>
		internal static partial class FentradaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for Fentrada.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Entrada.InputDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextInput").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Entrada.TextNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FCheckBox.
		/// </summary>
		internal static partial class FCheckBoxDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FCheckBox.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.CheckBox.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FRadioButton.
		/// </summary>
		internal static partial class FRadioButtonDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FRadioButton.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.RadioButton.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.RadioButton.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FTextRow.
		/// </summary>
		internal static partial class FTextRowDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FTextRow.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.TextRow.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.TextRow.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FFormularioFormal.
		/// </summary>
		internal static partial class FFormularioFormalDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FFormularioFormal.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.FormularioFormal.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.FormularioFormal.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FFormularioBonito.
		/// </summary>
		internal static partial class FFormularioBonitoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FFormularioBonito.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.FormularioBonito.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.FormularioBonito.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FinnerFormal.
		/// </summary>
		internal static partial class FinnerFormalDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FinnerFormal.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Inner.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Inner.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FColumna.
		/// </summary>
		internal static partial class FColumnaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FColumna.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.Columnas.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FColumnaRenglon.
		/// </summary>
		internal static partial class FColumnaRenglonDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FColumnaRenglon.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ColumnaRenglon.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ColumnaRenglon.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FTableBonita.
		/// </summary>
		internal static partial class FTableBonitaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FTableBonita.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.TableBonita.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FTableFormal.
		/// </summary>
		internal static partial class FTableFormalDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FTableFormal.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.TableFormal.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.TableFormal.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FButtonPrimary.
		/// </summary>
		internal static partial class FButtonPrimaryDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FButtonPrimary.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonPrimary.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonPrimary.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FButtonDanger.
		/// </summary>
		internal static partial class FButtonDangerDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FButtonDanger.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonDanger.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonDanger.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FButtonInfo.
		/// </summary>
		internal static partial class FButtonInfoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FButtonInfo.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonInfo.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonInfo.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonInfo.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FButtonWarning.
		/// </summary>
		internal static partial class FButtonWarningDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FButtonWarning.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonWarning.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonWarning.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonWarning.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FButtonSuccess.
		/// </summary>
		internal static partial class FButtonSuccessDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FButtonSuccess.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.ButtonSuccess.TextNombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextNombre").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FEntradaEmail.
		/// </summary>
		internal static partial class FEntradaEmailDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FEntradaEmail.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EntradaEmail.TextNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FEntradaPassword.
		/// </summary>
		internal static partial class FEntradaPasswordDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FEntradaPassword.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EntradaPassword.TextNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.DSLBootstrap.EntradaPassword.TextNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// DSLBootstrapDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x734dec8c, 0xcd91, 0x4d23, 0xbc, 0x72, 0x9a, 0xc9, 0x09, 0x8a, 0xdf, 0x24);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DSLBootstrapDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DSLBootstrapDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.InnerFormal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.FormularioFormal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.TableFormal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.InnerBonito), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.FormularioBonito), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.TableBonita), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ColumnaRenglon), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ButtonPrimary), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ButtonSuccess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.EntradaEmail), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.EntradaPassword), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ButtonInfo), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ButtonWarning), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.ButtonDanger), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Renglones), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Entrada), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.CheckBox), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Etiquetas), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.EditButton), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Barradeprogreso), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.EditItem), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Columnas), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Select), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.RadioButton), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.TextRow), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Company.DSLBootstrap.InnerFormal)
				{
					parentElement = GetParentForInnerFormal((global::Company.DSLBootstrap.InnerFormal)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.FormularioFormal)
				{
					parentElement = GetParentForFormularioFormal((global::Company.DSLBootstrap.FormularioFormal)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.TableFormal)
				{
					parentElement = GetParentForTableFormal((global::Company.DSLBootstrap.TableFormal)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.InnerBonito)
				{
					parentElement = GetParentForInnerBonito((global::Company.DSLBootstrap.InnerBonito)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.FormularioBonito)
				{
					parentElement = GetParentForFormularioBonito((global::Company.DSLBootstrap.FormularioBonito)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.TableBonita)
				{
					parentElement = GetParentForTableBonita((global::Company.DSLBootstrap.TableBonita)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ColumnaRenglon)
				{
					parentElement = GetParentForColumnaRenglon((global::Company.DSLBootstrap.ColumnaRenglon)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ButtonPrimary)
				{
					parentElement = GetParentForButtonPrimary((global::Company.DSLBootstrap.ButtonPrimary)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ButtonSuccess)
				{
					parentElement = GetParentForButtonSuccess((global::Company.DSLBootstrap.ButtonSuccess)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.EntradaEmail)
				{
					parentElement = GetParentForEntradaEmail((global::Company.DSLBootstrap.EntradaEmail)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.EntradaPassword)
				{
					parentElement = GetParentForEntradaPassword((global::Company.DSLBootstrap.EntradaPassword)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ButtonInfo)
				{
					parentElement = GetParentForButtonInfo((global::Company.DSLBootstrap.ButtonInfo)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ButtonWarning)
				{
					parentElement = GetParentForButtonWarning((global::Company.DSLBootstrap.ButtonWarning)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.ButtonDanger)
				{
					parentElement = GetParentForButtonDanger((global::Company.DSLBootstrap.ButtonDanger)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Renglones)
				{
					parentElement = GetParentForRenglones((global::Company.DSLBootstrap.Renglones)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Entrada)
				{
					parentElement = GetParentForEntrada((global::Company.DSLBootstrap.Entrada)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.CheckBox)
				{
					parentElement = GetParentForCheckBox((global::Company.DSLBootstrap.CheckBox)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Etiquetas)
				{
					parentElement = GetParentForEtiquetas((global::Company.DSLBootstrap.Etiquetas)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.EditButton)
				{
					parentElement = GetParentForEditButton((global::Company.DSLBootstrap.EditButton)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Barradeprogreso)
				{
					parentElement = GetParentForBarradeprogreso((global::Company.DSLBootstrap.Barradeprogreso)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.EditItem)
				{
					parentElement = GetParentForEditItem((global::Company.DSLBootstrap.EditItem)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Columnas)
				{
					parentElement = GetParentForColumnas((global::Company.DSLBootstrap.Columnas)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.Select)
				{
					parentElement = GetParentForSelect((global::Company.DSLBootstrap.Select)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.RadioButton)
				{
					parentElement = GetParentForRadioButton((global::Company.DSLBootstrap.RadioButton)childElement);
				} else
				if(childElement is global::Company.DSLBootstrap.TextRow)
				{
					parentElement = GetParentForTextRow((global::Company.DSLBootstrap.TextRow)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEditItem( global::Company.DSLBootstrap.EditItem root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Inner root2 = root.Inner;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEditButton( global::Company.DSLBootstrap.EditButton root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForBarradeprogreso( global::Company.DSLBootstrap.Barradeprogreso root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEtiquetas( global::Company.DSLBootstrap.Etiquetas root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEntrada( global::Company.DSLBootstrap.Entrada root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForCheckBox( global::Company.DSLBootstrap.CheckBox root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForRadioButton( global::Company.DSLBootstrap.RadioButton root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForTextRow( global::Company.DSLBootstrap.TextRow root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForSelect( global::Company.DSLBootstrap.Select root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForFormularioFormal( global::Company.DSLBootstrap.Formulario root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForInnerFormal( global::Company.DSLBootstrap.Inner root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForInnerBonito( global::Company.DSLBootstrap.Inner root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForFormularioBonito( global::Company.DSLBootstrap.Formulario root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForColumnas( global::Company.DSLBootstrap.Columnas root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Table root2 = root.Table;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForRenglones( global::Company.DSLBootstrap.Renglones root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Table root2 = root.Table;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForColumnaRenglon( global::Company.DSLBootstrap.ColumnaRenglon root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Renglones root2 = root.Renglones;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.Table root4 = root2.Table;
				if ( root4 == null ) return null;
				// Segments 4 and 5
				global::Company.DSLBootstrap.PaginaWeb result = root4.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForTableBonita( global::Company.DSLBootstrap.Table root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForTableFormal( global::Company.DSLBootstrap.Table root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.PaginaWeb result = root.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForButtonPrimary( global::Company.DSLBootstrap.ButtonPrimary root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForButtonInfo( global::Company.DSLBootstrap.ButtonInfo root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForButtonWarning( global::Company.DSLBootstrap.ButtonWarning root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForButtonDanger( global::Company.DSLBootstrap.ButtonDanger root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForButtonSuccess( global::Company.DSLBootstrap.ButtonSuccess root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEntradaEmail( global::Company.DSLBootstrap.EntradaEmail root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.DSLBootstrap.PaginaWeb GetParentForEntradaPassword( global::Company.DSLBootstrap.EntradaPassword root )
			{
				// Segments 0 and 1
				global::Company.DSLBootstrap.Formulario root2 = root.Formulario;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.DSLBootstrap.PaginaWeb result = root2.PaginaWeb;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.EditItem), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.FormularioFormal), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.Inner), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.FormularioBonito), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.TableBonita), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.DSLBootstrap.TableFormal), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::Company.DSLBootstrap.EditItem.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FEditItem.FindFEditItemDecorator("TextName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.EditItem.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.DSLBootstrap.FormularioFormal.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FFormularioFormal.FindFFormularioFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.FormularioFormal.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FFormularioFormal.FindFFormularioFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.FormularioFormal.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.DSLBootstrap.Inner.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FinnerFormal.FindFinnerFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.InnerFormal.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FinnerBonito.FindFinnerBonitoDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.InnerBonito.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FinnerFormal.FindFinnerFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.InnerFormal.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FinnerBonito.FindFinnerBonitoDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.InnerBonito.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.DSLBootstrap.FormularioBonito.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FFormularioBonito.FindFFormularioBonitoDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.FormularioBonito.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FFormularioBonito.FindFFormularioBonitoDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.FormularioBonito.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.DSLBootstrap.TableBonita.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FTableBonita.FindFTableBonitaDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.TableBonita.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.DSLBootstrap.TableFormal.TextNombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.DSLBootstrap.FTableFormal.FindFTableFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.TableFormal.DomainClassId);
					}
					decorator = global::Company.DSLBootstrap.FTableFormal.FindFTableFormalDecorator("TextNombre");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.DSLBootstrap.TableFormal.DomainClassId);
					}
				}
			}
		}
	
	}
