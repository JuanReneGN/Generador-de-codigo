//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass PaginaWeb
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWeb.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWeb.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1c24957a-6c67-4806-8743-0d35264cffef")]
	public partial class PaginaWeb : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PaginaWeb domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1c24957a, 0x6c67, 0x4806, 0x87, 0x43, 0x0d, 0x35, 0x26, 0x4c, 0xff, 0xef);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PaginaWeb(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PaginaWeb(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Formulario opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Formulario.
		/// Description for Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWeb
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Formulario> Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Formulario>, Formulario>(global::Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWebDomainRoleId);
			}
		}
		#endregion
		#region Inners opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Inners.
		/// Description for Company.DSLBootstrap.PaginaWebHasInners.PaginaWeb
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Inner> Inners
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Inner>, Inner>(global::Company.DSLBootstrap.PaginaWebHasInners.PaginaWebDomainRoleId);
			}
		}
		#endregion
		#region Tables opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tables.
		/// Description for Company.DSLBootstrap.PaginaWebHasTables.PaginaWeb
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> Tables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Table>, Table>(global::Company.DSLBootstrap.PaginaWebHasTables.PaginaWebDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Table.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Inner.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Formulario.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.DSLBootstrap.Table sourceTable1 = sourceElement as global::Company.DSLBootstrap.Table;
			if (sourceTable1 != null)
			{
				// Create link for path PaginaWebHasTables.Tables
				this.Tables.Add(sourceTable1);

				return;
			}
				
			global::Company.DSLBootstrap.Inner sourceInner2 = sourceElement as global::Company.DSLBootstrap.Inner;
			if (sourceInner2 != null)
			{
				// Create link for path PaginaWebHasInners.Inners
				this.Inners.Add(sourceInner2);

				return;
			}
				
			global::Company.DSLBootstrap.Formulario sourceFormulario3 = sourceElement as global::Company.DSLBootstrap.Formulario;
			if (sourceFormulario3 != null)
			{
				// Create link for path PaginaWebHasFormulario.Formulario
				this.Formulario.Add(sourceFormulario3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.DSLBootstrap.Table sourceTable1 = sourceElement as global::Company.DSLBootstrap.Table;
			if (sourceTable1 != null)
			{
				// Delete link for path PaginaWebHasTables.Tables
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.PaginaWebHasTables.GetLinks((global::Company.DSLBootstrap.PaginaWeb)this, sourceTable1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.PaginaWebHasTables.PaginaWebDomainRoleId, global::Company.DSLBootstrap.PaginaWebHasTables.TableDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Inner sourceInner2 = sourceElement as global::Company.DSLBootstrap.Inner;
			if (sourceInner2 != null)
			{
				// Delete link for path PaginaWebHasInners.Inners
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.PaginaWebHasInners.GetLinks((global::Company.DSLBootstrap.PaginaWeb)this, sourceInner2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.PaginaWebHasInners.PaginaWebDomainRoleId, global::Company.DSLBootstrap.PaginaWebHasInners.InnerDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Formulario sourceFormulario3 = sourceElement as global::Company.DSLBootstrap.Formulario;
			if (sourceFormulario3 != null)
			{
				// Delete link for path PaginaWebHasFormulario.Formulario
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.PaginaWebHasFormulario.GetLinks((global::Company.DSLBootstrap.PaginaWeb)this, sourceFormulario3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWebDomainRoleId, global::Company.DSLBootstrap.PaginaWebHasFormulario.FormularioDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass EditButton
	/// Description for Company.DSLBootstrap.EditButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditButton.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.EditButton.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8cb73674-9c93-4200-af29-bfba03b21efa")]
	public partial class EditButton : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EditButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8cb73674, 0x9c93, 0x4200, 0xaf, 0x29, 0xbf, 0xba, 0x03, 0xb2, 0x1e, 0xfa);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EditButton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EditButton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region onClick domain property code
		
		/// <summary>
		/// onClick domain property Id.
		/// </summary>
		public static readonly global::System.Guid onClickDomainPropertyId = new global::System.Guid(0x8cb454d7, 0x5a0e, 0x413a, 0x8d, 0x32, 0x12, 0xc7, 0x3b, 0x39, 0x92, 0x7b);
		
		/// <summary>
		/// Storage for onClick
		/// </summary>
		private global::System.String onClickPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of onClick domain property.
		/// Description for Company.DSLBootstrap.EditButton.On Click
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditButton/onClick.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EditButton/onClick.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8cb454d7-5a0e-413a-8d32-12c73b39927b")]
		public global::System.String onClick
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onClickPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				onClickPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EditButton.onClick domain property.
		/// </summary>
		internal sealed partial class onClickPropertyHandler : DslModeling::DomainPropertyValueHandler<EditButton, global::System.String>
		{
			private onClickPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EditButton.onClick domain property value handler.
			/// </summary>
			public static readonly onClickPropertyHandler Instance = new onClickPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EditButton.onClick domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return onClickDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EditButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onClickPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EditButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onClickPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditColor domain property code
		
		/// <summary>
		/// EditColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditColorDomainPropertyId = new global::System.Guid(0x8066fd5b, 0xba8d, 0x4520, 0x99, 0xac, 0xf4, 0x88, 0x19, 0x0c, 0xad, 0xd7);
		
		/// <summary>
		/// Storage for EditColor
		/// </summary>
		private global::System.String editColorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EditColor domain property.
		/// Description for Company.DSLBootstrap.EditButton.Edit Color
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditButton/EditColor.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EditButton/EditColor.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8066fd5b-ba8d-4520-99ac-f488190cadd7")]
		public global::System.String EditColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return editColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EditButton.EditColor domain property.
		/// </summary>
		internal sealed partial class EditColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EditButton, global::System.String>
		{
			private EditColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EditButton.EditColor domain property value handler.
			/// </summary>
			public static readonly EditColorPropertyHandler Instance = new EditColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EditButton.EditColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EditButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.editColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EditButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.editColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Icon domain property code
		
		/// <summary>
		/// Icon domain property Id.
		/// </summary>
		public static readonly global::System.Guid IconDomainPropertyId = new global::System.Guid(0xd8fa06cc, 0x1cf9, 0x4fd2, 0x89, 0x81, 0x23, 0x59, 0x98, 0xf1, 0xe4, 0xa6);
		
		/// <summary>
		/// Storage for Icon
		/// </summary>
		private global::System.String iconPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Icon domain property.
		/// Description for Company.DSLBootstrap.EditButton.Icon
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditButton/Icon.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EditButton/Icon.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d8fa06cc-1cf9-4fd2-8981-235998f1e4a6")]
		public global::System.String Icon
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return iconPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IconPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EditButton.Icon domain property.
		/// </summary>
		internal sealed partial class IconPropertyHandler : DslModeling::DomainPropertyValueHandler<EditButton, global::System.String>
		{
			private IconPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EditButton.Icon domain property value handler.
			/// </summary>
			public static readonly IconPropertyHandler Instance = new IconPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EditButton.Icon domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IconDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EditButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.iconPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EditButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.iconPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TextName domain property code
		
		/// <summary>
		/// TextName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNameDomainPropertyId = new global::System.Guid(0xe857c44d, 0x804c, 0x472d, 0x9f, 0x0c, 0xdc, 0x4c, 0x5c, 0x0e, 0x06, 0x18);
		
		/// <summary>
		/// Storage for TextName
		/// </summary>
		private global::System.String textNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextName domain property.
		/// Description for Company.DSLBootstrap.EditButton.Text Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditButton/TextName.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EditButton/TextName.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e857c44d-804c-472d-9f0c-dc4c5c0e0618")]
		public global::System.String TextName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EditButton.TextName domain property.
		/// </summary>
		internal sealed partial class TextNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EditButton, global::System.String>
		{
			private TextNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EditButton.TextName domain property value handler.
			/// </summary>
			public static readonly TextNamePropertyHandler Instance = new TextNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EditButton.TextName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EditButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EditButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButton
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButtonDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButtonDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Formulario
	/// Description for Company.DSLBootstrap.Formulario
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("28529ea1-db57-40ba-a665-783aee8961d7")]
	public partial class Formulario : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Formulario domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x28529ea1, 0xdb57, 0x40ba, 0xa6, 0x65, 0x78, 0x3a, 0xee, 0x89, 0x61, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Formulario(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Formulario(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PaginaWeb opposite domain role accessor
		/// <summary>
		/// Gets or sets PaginaWeb.
		/// Description for Company.DSLBootstrap.PaginaWebHasFormulario.Formulario
		/// </summary>
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasFormulario.FormularioDomainRoleId) as PaginaWeb;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasFormulario.FormularioDomainRoleId, value);
			}
		}
		#endregion
		#region EditButtons opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EditButtons.
		/// Description for Company.DSLBootstrap.FormularioBonitoTieneEditButtons.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EditButton> EditButtons
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EditButton>, EditButton>(global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.FormularioDomainRoleId);
			}
		}
		#endregion
		#region Entrada opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entrada.
		/// Description for Company.DSLBootstrap.FormularioHasEntrada.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entrada> Entrada
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entrada>, Entrada>(global::Company.DSLBootstrap.FormularioHasEntrada.FormularioDomainRoleId);
			}
		}
		#endregion
		#region Etiquetas opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Etiquetas.
		/// Description for Company.DSLBootstrap.FormularioHasEtiquetas.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Etiquetas> Etiquetas
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Etiquetas>, Etiquetas>(global::Company.DSLBootstrap.FormularioHasEtiquetas.FormularioDomainRoleId);
			}
		}
		#endregion
		#region Barradeprogreso opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Barradeprogreso.
		/// Description for Company.DSLBootstrap.FormularioHasBarradeprogreso.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Barradeprogreso> Barradeprogreso
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Barradeprogreso>, Barradeprogreso>(global::Company.DSLBootstrap.FormularioHasBarradeprogreso.FormularioDomainRoleId);
			}
		}
		#endregion
		#region CheckBoxes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CheckBoxes.
		/// Description for Company.DSLBootstrap.FormularioHasCheckBoxes.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CheckBox> CheckBoxes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CheckBox>, CheckBox>(global::Company.DSLBootstrap.FormularioHasCheckBoxes.FormularioDomainRoleId);
			}
		}
		#endregion
		#region RadioButtons opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RadioButtons.
		/// Description for Company.DSLBootstrap.FormularioHasRadioButtons.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RadioButton> RadioButtons
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RadioButton>, RadioButton>(global::Company.DSLBootstrap.FormularioHasRadioButtons.FormularioDomainRoleId);
			}
		}
		#endregion
		#region TextRows opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TextRows.
		/// Description for Company.DSLBootstrap.FormularioHasTextRows.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TextRow> TextRows
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TextRow>, TextRow>(global::Company.DSLBootstrap.FormularioHasTextRows.FormularioDomainRoleId);
			}
		}
		#endregion
		#region Selecting opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Selecting.
		/// Description for Company.DSLBootstrap.FormularioHasSelecting.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Select> Selecting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Select>, Select>(global::Company.DSLBootstrap.FormularioHasSelecting.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ButtonDangers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ButtonDangers.
		/// Description for Company.DSLBootstrap.FormularioHasButtonDangers.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ButtonDanger> ButtonDangers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonDanger>, ButtonDanger>(global::Company.DSLBootstrap.FormularioHasButtonDangers.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ButtonInfo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ButtonInfo.
		/// Description for Company.DSLBootstrap.FormularioHasButtonInfo.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ButtonInfo> ButtonInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonInfo>, ButtonInfo>(global::Company.DSLBootstrap.FormularioHasButtonInfo.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ButtonPrimaries opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ButtonPrimaries.
		/// Description for Company.DSLBootstrap.FormularioHasButtonPrimaries.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ButtonPrimary> ButtonPrimaries
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonPrimary>, ButtonPrimary>(global::Company.DSLBootstrap.FormularioHasButtonPrimaries.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ButtonWarnings opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ButtonWarnings.
		/// Description for Company.DSLBootstrap.FormularioHasButtonWarnings.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ButtonWarning> ButtonWarnings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonWarning>, ButtonWarning>(global::Company.DSLBootstrap.FormularioHasButtonWarnings.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ButtonSuccesses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ButtonSuccesses.
		/// Description for Company.DSLBootstrap.FormularioHasButtonSuccesses.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ButtonSuccess> ButtonSuccesses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonSuccess>, ButtonSuccess>(global::Company.DSLBootstrap.FormularioHasButtonSuccesses.FormularioDomainRoleId);
			}
		}
		#endregion
		#region EntradaEmails opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntradaEmails.
		/// Description for Company.DSLBootstrap.FormularioHasEntradaEmails.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntradaEmail> EntradaEmails
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntradaEmail>, EntradaEmail>(global::Company.DSLBootstrap.FormularioHasEntradaEmails.FormularioDomainRoleId);
			}
		}
		#endregion
		#region EntradaPasswords opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntradaPasswords.
		/// Description for Company.DSLBootstrap.FormularioHasEntradaPasswords.Formulario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntradaPassword> EntradaPasswords
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntradaPassword>, EntradaPassword>(global::Company.DSLBootstrap.FormularioHasEntradaPasswords.FormularioDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ButtonPrimary.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ButtonInfo.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ButtonDanger.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ButtonWarning.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.EntradaPassword.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.EntradaEmail.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ButtonSuccess.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Select.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Etiquetas.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Entrada.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.EditButton.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Barradeprogreso.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.TextRow.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.RadioButton.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.CheckBox.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.DSLBootstrap.ButtonPrimary sourceButtonPrimary1 = sourceElement as global::Company.DSLBootstrap.ButtonPrimary;
			if (sourceButtonPrimary1 != null)
			{
				// Create link for path FormularioHasButtonPrimaries.ButtonPrimaries
				this.ButtonPrimaries.Add(sourceButtonPrimary1);

				return;
			}
				
			global::Company.DSLBootstrap.ButtonInfo sourceButtonInfo2 = sourceElement as global::Company.DSLBootstrap.ButtonInfo;
			if (sourceButtonInfo2 != null)
			{
				// Create link for path FormularioHasButtonInfo.ButtonInfo
				this.ButtonInfo.Add(sourceButtonInfo2);

				return;
			}
				
			global::Company.DSLBootstrap.ButtonDanger sourceButtonDanger3 = sourceElement as global::Company.DSLBootstrap.ButtonDanger;
			if (sourceButtonDanger3 != null)
			{
				// Create link for path FormularioHasButtonDangers.ButtonDangers
				this.ButtonDangers.Add(sourceButtonDanger3);

				return;
			}
				
			global::Company.DSLBootstrap.ButtonWarning sourceButtonWarning4 = sourceElement as global::Company.DSLBootstrap.ButtonWarning;
			if (sourceButtonWarning4 != null)
			{
				// Create link for path FormularioHasButtonWarnings.ButtonWarnings
				this.ButtonWarnings.Add(sourceButtonWarning4);

				return;
			}
				
			global::Company.DSLBootstrap.EntradaPassword sourceEntradaPassword5 = sourceElement as global::Company.DSLBootstrap.EntradaPassword;
			if (sourceEntradaPassword5 != null)
			{
				// Create link for path FormularioHasEntradaPasswords.EntradaPasswords
				this.EntradaPasswords.Add(sourceEntradaPassword5);

				return;
			}
				
			global::Company.DSLBootstrap.EntradaEmail sourceEntradaEmail6 = sourceElement as global::Company.DSLBootstrap.EntradaEmail;
			if (sourceEntradaEmail6 != null)
			{
				// Create link for path FormularioHasEntradaEmails.EntradaEmails
				this.EntradaEmails.Add(sourceEntradaEmail6);

				return;
			}
				
			global::Company.DSLBootstrap.ButtonSuccess sourceButtonSuccess7 = sourceElement as global::Company.DSLBootstrap.ButtonSuccess;
			if (sourceButtonSuccess7 != null)
			{
				// Create link for path FormularioHasButtonSuccesses.ButtonSuccesses
				this.ButtonSuccesses.Add(sourceButtonSuccess7);

				return;
			}
				
			global::Company.DSLBootstrap.Select sourceSelect8 = sourceElement as global::Company.DSLBootstrap.Select;
			if (sourceSelect8 != null)
			{
				// Create link for path FormularioHasSelecting.Selecting
				this.Selecting.Add(sourceSelect8);

				return;
			}
				
			global::Company.DSLBootstrap.Etiquetas sourceEtiquetas9 = sourceElement as global::Company.DSLBootstrap.Etiquetas;
			if (sourceEtiquetas9 != null)
			{
				// Create link for path FormularioHasEtiquetas.Etiquetas
				this.Etiquetas.Add(sourceEtiquetas9);

				return;
			}
				
			global::Company.DSLBootstrap.Entrada sourceEntrada10 = sourceElement as global::Company.DSLBootstrap.Entrada;
			if (sourceEntrada10 != null)
			{
				// Create link for path FormularioHasEntrada.Entrada
				this.Entrada.Add(sourceEntrada10);

				return;
			}
				
			global::Company.DSLBootstrap.EditButton sourceEditButton11 = sourceElement as global::Company.DSLBootstrap.EditButton;
			if (sourceEditButton11 != null)
			{
				// Create link for path FormularioBonitoTieneEditButtons.EditButtons
				this.EditButtons.Add(sourceEditButton11);

				return;
			}
				
			global::Company.DSLBootstrap.Barradeprogreso sourceBarradeprogreso12 = sourceElement as global::Company.DSLBootstrap.Barradeprogreso;
			if (sourceBarradeprogreso12 != null)
			{
				// Create link for path FormularioHasBarradeprogreso.Barradeprogreso
				this.Barradeprogreso.Add(sourceBarradeprogreso12);

				return;
			}
				
			global::Company.DSLBootstrap.TextRow sourceTextRow13 = sourceElement as global::Company.DSLBootstrap.TextRow;
			if (sourceTextRow13 != null)
			{
				// Create link for path FormularioHasTextRows.TextRows
				this.TextRows.Add(sourceTextRow13);

				return;
			}
				
			global::Company.DSLBootstrap.RadioButton sourceRadioButton14 = sourceElement as global::Company.DSLBootstrap.RadioButton;
			if (sourceRadioButton14 != null)
			{
				// Create link for path FormularioHasRadioButtons.RadioButtons
				this.RadioButtons.Add(sourceRadioButton14);

				return;
			}
				
			global::Company.DSLBootstrap.CheckBox sourceCheckBox15 = sourceElement as global::Company.DSLBootstrap.CheckBox;
			if (sourceCheckBox15 != null)
			{
				// Create link for path FormularioHasCheckBoxes.CheckBoxes
				this.CheckBoxes.Add(sourceCheckBox15);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.DSLBootstrap.ButtonPrimary sourceButtonPrimary1 = sourceElement as global::Company.DSLBootstrap.ButtonPrimary;
			if (sourceButtonPrimary1 != null)
			{
				// Delete link for path FormularioHasButtonPrimaries.ButtonPrimaries
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasButtonPrimaries.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceButtonPrimary1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasButtonPrimaries.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.ButtonInfo sourceButtonInfo2 = sourceElement as global::Company.DSLBootstrap.ButtonInfo;
			if (sourceButtonInfo2 != null)
			{
				// Delete link for path FormularioHasButtonInfo.ButtonInfo
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasButtonInfo.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceButtonInfo2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasButtonInfo.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfoDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.ButtonDanger sourceButtonDanger3 = sourceElement as global::Company.DSLBootstrap.ButtonDanger;
			if (sourceButtonDanger3 != null)
			{
				// Delete link for path FormularioHasButtonDangers.ButtonDangers
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasButtonDangers.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceButtonDanger3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasButtonDangers.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDangerDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.ButtonWarning sourceButtonWarning4 = sourceElement as global::Company.DSLBootstrap.ButtonWarning;
			if (sourceButtonWarning4 != null)
			{
				// Delete link for path FormularioHasButtonWarnings.ButtonWarnings
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasButtonWarnings.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceButtonWarning4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasButtonWarnings.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarningDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.EntradaPassword sourceEntradaPassword5 = sourceElement as global::Company.DSLBootstrap.EntradaPassword;
			if (sourceEntradaPassword5 != null)
			{
				// Delete link for path FormularioHasEntradaPasswords.EntradaPasswords
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasEntradaPasswords.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceEntradaPassword5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasEntradaPasswords.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.EntradaEmail sourceEntradaEmail6 = sourceElement as global::Company.DSLBootstrap.EntradaEmail;
			if (sourceEntradaEmail6 != null)
			{
				// Delete link for path FormularioHasEntradaEmails.EntradaEmails
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasEntradaEmails.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceEntradaEmail6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasEntradaEmails.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmailDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.ButtonSuccess sourceButtonSuccess7 = sourceElement as global::Company.DSLBootstrap.ButtonSuccess;
			if (sourceButtonSuccess7 != null)
			{
				// Delete link for path FormularioHasButtonSuccesses.ButtonSuccesses
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasButtonSuccesses.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceButtonSuccess7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasButtonSuccesses.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Select sourceSelect8 = sourceElement as global::Company.DSLBootstrap.Select;
			if (sourceSelect8 != null)
			{
				// Delete link for path FormularioHasSelecting.Selecting
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasSelecting.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceSelect8))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasSelecting.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasSelecting.SelectDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Etiquetas sourceEtiquetas9 = sourceElement as global::Company.DSLBootstrap.Etiquetas;
			if (sourceEtiquetas9 != null)
			{
				// Delete link for path FormularioHasEtiquetas.Etiquetas
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasEtiquetas.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceEtiquetas9))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasEtiquetas.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasEtiquetas.EtiquetasDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Entrada sourceEntrada10 = sourceElement as global::Company.DSLBootstrap.Entrada;
			if (sourceEntrada10 != null)
			{
				// Delete link for path FormularioHasEntrada.Entrada
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasEntrada.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceEntrada10))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasEntrada.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasEntrada.EntradaDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.EditButton sourceEditButton11 = sourceElement as global::Company.DSLBootstrap.EditButton;
			if (sourceEditButton11 != null)
			{
				// Delete link for path FormularioBonitoTieneEditButtons.EditButtons
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceEditButton11))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButtonDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Barradeprogreso sourceBarradeprogreso12 = sourceElement as global::Company.DSLBootstrap.Barradeprogreso;
			if (sourceBarradeprogreso12 != null)
			{
				// Delete link for path FormularioHasBarradeprogreso.Barradeprogreso
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasBarradeprogreso.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceBarradeprogreso12))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasBarradeprogreso.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.TextRow sourceTextRow13 = sourceElement as global::Company.DSLBootstrap.TextRow;
			if (sourceTextRow13 != null)
			{
				// Delete link for path FormularioHasTextRows.TextRows
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasTextRows.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceTextRow13))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasTextRows.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasTextRows.TextRowDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.RadioButton sourceRadioButton14 = sourceElement as global::Company.DSLBootstrap.RadioButton;
			if (sourceRadioButton14 != null)
			{
				// Delete link for path FormularioHasRadioButtons.RadioButtons
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasRadioButtons.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceRadioButton14))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasRadioButtons.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasRadioButtons.RadioButtonDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.CheckBox sourceCheckBox15 = sourceElement as global::Company.DSLBootstrap.CheckBox;
			if (sourceCheckBox15 != null)
			{
				// Delete link for path FormularioHasCheckBoxes.CheckBoxes
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.FormularioHasCheckBoxes.GetLinks((global::Company.DSLBootstrap.Formulario)this, sourceCheckBox15))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.FormularioHasCheckBoxes.FormularioDomainRoleId, global::Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBoxDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Table
	/// Description for Company.DSLBootstrap.Table
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Table.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Table.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c6cc1844-23c7-4b6d-9361-028996ec794f")]
	public partial class Table : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Table domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6cc1844, 0x23c7, 0x4b6d, 0x93, 0x61, 0x02, 0x89, 0x96, 0xec, 0x79, 0x4f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PaginaWeb opposite domain role accessor
		/// <summary>
		/// Gets or sets PaginaWeb.
		/// Description for Company.DSLBootstrap.PaginaWebHasTables.Table
		/// </summary>
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasTables.TableDomainRoleId) as PaginaWeb;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasTables.TableDomainRoleId, value);
			}
		}
		#endregion
		#region Renglones opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Renglones.
		/// Description for Company.DSLBootstrap.TableHasRenglones.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Renglones> Renglones
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Renglones>, Renglones>(global::Company.DSLBootstrap.TableHasRenglones.TableDomainRoleId);
			}
		}
		#endregion
		#region Columnas opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Columnas.
		/// Description for Company.DSLBootstrap.TableHasColumnas.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Columnas> Columnas
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Columnas>, Columnas>(global::Company.DSLBootstrap.TableHasColumnas.TableDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Columnas.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.Renglones.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.DSLBootstrap.Columnas sourceColumnas1 = sourceElement as global::Company.DSLBootstrap.Columnas;
			if (sourceColumnas1 != null)
			{
				// Create link for path TableHasColumnas.Columnas
				this.Columnas.Add(sourceColumnas1);

				return;
			}
				
			global::Company.DSLBootstrap.Renglones sourceRenglones2 = sourceElement as global::Company.DSLBootstrap.Renglones;
			if (sourceRenglones2 != null)
			{
				// Create link for path TableHasRenglones.Renglones
				this.Renglones.Add(sourceRenglones2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.DSLBootstrap.Columnas sourceColumnas1 = sourceElement as global::Company.DSLBootstrap.Columnas;
			if (sourceColumnas1 != null)
			{
				// Delete link for path TableHasColumnas.Columnas
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.TableHasColumnas.GetLinks((global::Company.DSLBootstrap.Table)this, sourceColumnas1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.TableHasColumnas.TableDomainRoleId, global::Company.DSLBootstrap.TableHasColumnas.ColumnasDomainRoleId);
				}

				return;
			}
				
			global::Company.DSLBootstrap.Renglones sourceRenglones2 = sourceElement as global::Company.DSLBootstrap.Renglones;
			if (sourceRenglones2 != null)
			{
				// Delete link for path TableHasRenglones.Renglones
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.TableHasRenglones.GetLinks((global::Company.DSLBootstrap.Table)this, sourceRenglones2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.TableHasRenglones.TableDomainRoleId, global::Company.DSLBootstrap.TableHasRenglones.RenglonesDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Inner
	/// Description for Company.DSLBootstrap.Inner
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Inner.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Inner.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("214c39ef-61a8-4dc2-8b40-75d22a934360")]
	public partial class Inner : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Inner domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x214c39ef, 0x61a8, 0x4dc2, 0x8b, 0x40, 0x75, 0xd2, 0x2a, 0x93, 0x43, 0x60);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Inner(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Inner(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x126206ed, 0xa93a, 0x41a5, 0x82, 0x8f, 0x6d, 0xbc, 0xfa, 0x94, 0xcc, 0x07);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Inner.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Inner/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Inner/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("126206ed-a93a-41a5-828f-6dbcfa94cc07")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Inner.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Inner, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Inner.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Inner.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Inner element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Inner element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PaginaWeb opposite domain role accessor
		/// <summary>
		/// Gets or sets PaginaWeb.
		/// Description for Company.DSLBootstrap.PaginaWebHasInners.Inner
		/// </summary>
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasInners.InnerDomainRoleId) as PaginaWeb;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.PaginaWebHasInners.InnerDomainRoleId, value);
			}
		}
		#endregion
		#region EditItems opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EditItems.
		/// Description for Company.DSLBootstrap.InnerHasEditItems.Inner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EditItem> EditItems
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EditItem>, EditItem>(global::Company.DSLBootstrap.InnerHasEditItems.InnerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.EditItem.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.DSLBootstrap.EditItem sourceEditItem1 = sourceElement as global::Company.DSLBootstrap.EditItem;
			if (sourceEditItem1 != null)
			{
				// Create link for path InnerHasEditItems.EditItems
				this.EditItems.Add(sourceEditItem1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.DSLBootstrap.EditItem sourceEditItem1 = sourceElement as global::Company.DSLBootstrap.EditItem;
			if (sourceEditItem1 != null)
			{
				// Delete link for path InnerHasEditItems.EditItems
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.InnerHasEditItems.GetLinks((global::Company.DSLBootstrap.Inner)this, sourceEditItem1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.InnerHasEditItems.InnerDomainRoleId, global::Company.DSLBootstrap.InnerHasEditItems.EditItemDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Entrada
	/// Description for Company.DSLBootstrap.Entrada
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Entrada.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Entrada.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d589c457-eeba-436b-b859-cbd8d05dba60")]
	public partial class Entrada : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entrada domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd589c457, 0xeeba, 0x436b, 0xb8, 0x59, 0xcb, 0xd8, 0xd0, 0x5d, 0xba, 0x60);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entrada(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entrada(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Input domain property code
		
		/// <summary>
		/// Input domain property Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainPropertyId = new global::System.Guid(0x19732b4d, 0x7ca5, 0x4383, 0xa6, 0xde, 0x0e, 0x75, 0x29, 0x43, 0x04, 0x72);
		
		/// <summary>
		/// Storage for Input
		/// </summary>
		private global::System.String inputPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Input domain property.
		/// Description for Company.DSLBootstrap.Entrada.Input
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Entrada/Input.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Entrada/Input.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("19732b4d-7ca5-4383-a6de-0e7529430472")]
		public global::System.String Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inputPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InputPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entrada.Input domain property.
		/// </summary>
		internal sealed partial class InputPropertyHandler : DslModeling::DomainPropertyValueHandler<Entrada, global::System.String>
		{
			private InputPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entrada.Input domain property value handler.
			/// </summary>
			public static readonly InputPropertyHandler Instance = new InputPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entrada.Input domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InputDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entrada element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inputPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entrada element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inputPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TextName domain property code
		
		/// <summary>
		/// TextName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNameDomainPropertyId = new global::System.Guid(0xa3cb68ee, 0xcd1e, 0x4eb7, 0xa3, 0x8d, 0xe1, 0x53, 0xe4, 0x64, 0x98, 0x07);
		
		/// <summary>
		/// Storage for TextName
		/// </summary>
		private global::System.String textNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextName domain property.
		/// Description for Company.DSLBootstrap.Entrada.Text Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Entrada/TextName.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Entrada/TextName.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a3cb68ee-cd1e-4eb7-a38d-e153e4649807")]
		public global::System.String TextName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entrada.TextName domain property.
		/// </summary>
		internal sealed partial class TextNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entrada, global::System.String>
		{
			private TextNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entrada.TextName domain property value handler.
			/// </summary>
			public static readonly TextNamePropertyHandler Instance = new TextNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entrada.TextName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entrada element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entrada element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasEntrada.Entrada
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntrada.EntradaDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntrada.EntradaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Etiquetas
	/// Description for Company.DSLBootstrap.Etiquetas
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Etiquetas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Etiquetas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("46035b45-1546-4dd6-a7be-17b00afbae2b")]
	public partial class Etiquetas : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Etiquetas domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46035b45, 0x1546, 0x4dd6, 0xa7, 0xbe, 0x17, 0xb0, 0x0a, 0xfb, 0xae, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Etiquetas(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Etiquetas(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xcb3aead6, 0x5005, 0x4c4e, 0x94, 0xd4, 0x98, 0x6f, 0x5a, 0xb5, 0xb5, 0x89);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Etiquetas.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Etiquetas/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Etiquetas/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("cb3aead6-5005-4c4e-94d4-986f5ab5b589")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Etiquetas.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Etiquetas, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Etiquetas.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Etiquetas.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Etiquetas element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Etiquetas element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditColor domain property code
		
		/// <summary>
		/// EditColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditColorDomainPropertyId = new global::System.Guid(0x664636b8, 0xb794, 0x40d4, 0x91, 0x95, 0x6c, 0xb2, 0xde, 0xaf, 0xab, 0x43);
		
		/// <summary>
		/// Storage for EditColor
		/// </summary>
		private global::System.String editColorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EditColor domain property.
		/// Description for Company.DSLBootstrap.Etiquetas.Edit Color
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Etiquetas/EditColor.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Etiquetas/EditColor.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("664636b8-b794-40d4-9195-6cb2deafab43")]
		public global::System.String EditColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return editColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Etiquetas.EditColor domain property.
		/// </summary>
		internal sealed partial class EditColorPropertyHandler : DslModeling::DomainPropertyValueHandler<Etiquetas, global::System.String>
		{
			private EditColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Etiquetas.EditColor domain property value handler.
			/// </summary>
			public static readonly EditColorPropertyHandler Instance = new EditColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Etiquetas.EditColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Etiquetas element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.editColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Etiquetas element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.editColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Output domain property code
		
		/// <summary>
		/// Output domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputDomainPropertyId = new global::System.Guid(0x041c390b, 0x1d1e, 0x49f1, 0xa5, 0xa7, 0x43, 0xc1, 0x4f, 0x6f, 0x78, 0x65);
		
		/// <summary>
		/// Storage for Output
		/// </summary>
		private global::System.String outputPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Output domain property.
		/// Description for Company.DSLBootstrap.Etiquetas.Output
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Etiquetas/Output.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Etiquetas/Output.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("041c390b-1d1e-49f1-a5a7-43c14f6f7865")]
		public global::System.String Output
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outputPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Etiquetas.Output domain property.
		/// </summary>
		internal sealed partial class OutputPropertyHandler : DslModeling::DomainPropertyValueHandler<Etiquetas, global::System.String>
		{
			private OutputPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Etiquetas.Output domain property value handler.
			/// </summary>
			public static readonly OutputPropertyHandler Instance = new OutputPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Etiquetas.Output domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Etiquetas element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.outputPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Etiquetas element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outputPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EstiloLetra domain property code
		
		/// <summary>
		/// EstiloLetra domain property Id.
		/// </summary>
		public static readonly global::System.Guid EstiloLetraDomainPropertyId = new global::System.Guid(0xddf2196b, 0xaf80, 0x4f29, 0xbe, 0x91, 0x1a, 0x15, 0x37, 0x3e, 0xbf, 0xbe);
		
		/// <summary>
		/// Storage for EstiloLetra
		/// </summary>
		private global::System.String estiloLetraPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EstiloLetra domain property.
		/// Description for Company.DSLBootstrap.Etiquetas.Estilo Letra
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Etiquetas/EstiloLetra.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Etiquetas/EstiloLetra.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ddf2196b-af80-4f29-be91-1a15373ebfbe")]
		public global::System.String EstiloLetra
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return estiloLetraPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EstiloLetraPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Etiquetas.EstiloLetra domain property.
		/// </summary>
		internal sealed partial class EstiloLetraPropertyHandler : DslModeling::DomainPropertyValueHandler<Etiquetas, global::System.String>
		{
			private EstiloLetraPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Etiquetas.EstiloLetra domain property value handler.
			/// </summary>
			public static readonly EstiloLetraPropertyHandler Instance = new EstiloLetraPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Etiquetas.EstiloLetra domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EstiloLetraDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Etiquetas element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.estiloLetraPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Etiquetas element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.estiloLetraPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasEtiquetas.Etiquetas
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEtiquetas.EtiquetasDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEtiquetas.EtiquetasDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Barradeprogreso
	/// Description for Company.DSLBootstrap.Barradeprogreso
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Barradeprogreso.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Barradeprogreso.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d5453624-6778-446b-b99e-93faeda2452b")]
	public partial class Barradeprogreso : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Barradeprogreso domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5453624, 0x6778, 0x446b, 0xb9, 0x9e, 0x93, 0xfa, 0xed, 0xa2, 0x45, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Barradeprogreso(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Barradeprogreso(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xff1169f6, 0x76f7, 0x4bac, 0x84, 0x15, 0xa0, 0x81, 0x1c, 0xcb, 0x1e, 0xc7);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Barradeprogreso.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Barradeprogreso/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Barradeprogreso/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ff1169f6-76f7-4bac-8415-a0811ccb1ec7")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Barradeprogreso.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Barradeprogreso, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Barradeprogreso.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Barradeprogreso.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Barradeprogreso element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Barradeprogreso element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Max domain property code
		
		/// <summary>
		/// Max domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxDomainPropertyId = new global::System.Guid(0xa2077dd1, 0x25c4, 0x4897, 0x87, 0xcf, 0x4c, 0x9b, 0x2f, 0x59, 0x7b, 0x83);
		
		/// <summary>
		/// Storage for Max
		/// </summary>
		private global::System.String maxPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Max domain property.
		/// Description for Company.DSLBootstrap.Barradeprogreso.Max
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Barradeprogreso/Max.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Barradeprogreso/Max.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a2077dd1-25c4-4897-87cf-4c9b2f597b83")]
		public global::System.String Max
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Barradeprogreso.Max domain property.
		/// </summary>
		internal sealed partial class MaxPropertyHandler : DslModeling::DomainPropertyValueHandler<Barradeprogreso, global::System.String>
		{
			private MaxPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Barradeprogreso.Max domain property value handler.
			/// </summary>
			public static readonly MaxPropertyHandler Instance = new MaxPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Barradeprogreso.Max domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Barradeprogreso element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Barradeprogreso element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditColor domain property code
		
		/// <summary>
		/// EditColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditColorDomainPropertyId = new global::System.Guid(0xfed63af2, 0x3f3b, 0x4866, 0x94, 0x34, 0x3a, 0x53, 0x32, 0xc6, 0xb8, 0x67);
		
		/// <summary>
		/// Storage for EditColor
		/// </summary>
		private global::System.String editColorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EditColor domain property.
		/// Description for Company.DSLBootstrap.Barradeprogreso.Edit Color
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Barradeprogreso/EditColor.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Barradeprogreso/EditColor.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fed63af2-3f3b-4866-9434-3a5332c6b867")]
		public global::System.String EditColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return editColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Barradeprogreso.EditColor domain property.
		/// </summary>
		internal sealed partial class EditColorPropertyHandler : DslModeling::DomainPropertyValueHandler<Barradeprogreso, global::System.String>
		{
			private EditColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Barradeprogreso.EditColor domain property value handler.
			/// </summary>
			public static readonly EditColorPropertyHandler Instance = new EditColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Barradeprogreso.EditColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Barradeprogreso element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.editColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Barradeprogreso element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.editColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Min domain property code
		
		/// <summary>
		/// Min domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinDomainPropertyId = new global::System.Guid(0x41ef27cf, 0x53ef, 0x49fa, 0xa4, 0x2d, 0x36, 0x56, 0xad, 0xe9, 0x0d, 0x34);
		
		/// <summary>
		/// Storage for Min
		/// </summary>
		private global::System.String minPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Min domain property.
		/// Description for Company.DSLBootstrap.Barradeprogreso.Min
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Barradeprogreso/Min.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Barradeprogreso/Min.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("41ef27cf-53ef-49fa-a42d-3656ade90d34")]
		public global::System.String Min
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Barradeprogreso.Min domain property.
		/// </summary>
		internal sealed partial class MinPropertyHandler : DslModeling::DomainPropertyValueHandler<Barradeprogreso, global::System.String>
		{
			private MinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Barradeprogreso.Min domain property value handler.
			/// </summary>
			public static readonly MinPropertyHandler Instance = new MinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Barradeprogreso.Min domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Barradeprogreso element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Barradeprogreso element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for
		/// Company.DSLBootstrap.FormularioHasBarradeprogreso.Barradeprogreso
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass FormularioFormal
	/// Description for Company.DSLBootstrap.FormularioFormal
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioFormal.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioFormal.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("470f6bb8-ece9-43c3-84d2-424cce698df3")]
	public partial class FormularioFormal : Formulario
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FormularioFormal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x470f6bb8, 0xece9, 0x43c3, 0x84, 0xd2, 0x42, 0x4c, 0xce, 0x69, 0x8d, 0xf3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormularioFormal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormularioFormal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xf69b254f, 0xb3b7, 0x4eb2, 0x89, 0x3c, 0xf9, 0x9d, 0x04, 0xed, 0x1f, 0xf5);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.FormularioFormal.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioFormal/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioFormal/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f69b254f-b3b7-4eb2-893c-f99d04ed1ff5")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FormularioFormal.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<FormularioFormal, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FormularioFormal.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FormularioFormal.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FormularioFormal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FormularioFormal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass FormularioBonito
	/// Description for Company.DSLBootstrap.FormularioBonito
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioBonito.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioBonito.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("3c7cb92e-5ad1-47a8-ba6a-e416ff7a8433")]
	public partial class FormularioBonito : Formulario
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FormularioBonito domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3c7cb92e, 0x5ad1, 0x47a8, 0xba, 0x6a, 0xe4, 0x16, 0xff, 0x7a, 0x84, 0x33);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormularioBonito(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FormularioBonito(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xee8aa189, 0xf090, 0x4830, 0x85, 0x9e, 0x93, 0xa7, 0xa2, 0xd8, 0x25, 0x14);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.FormularioBonito.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioBonito/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioBonito/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ee8aa189-f090-4830-859e-93a7a2d82514")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FormularioBonito.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<FormularioBonito, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FormularioBonito.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FormularioBonito.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FormularioBonito element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FormularioBonito element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass CheckBox
	/// Description for Company.DSLBootstrap.CheckBox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.CheckBox.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.CheckBox.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e2abe583-5c52-4ebc-841d-931ddc6222a8")]
	public partial class CheckBox : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CheckBox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2abe583, 0x5c52, 0x4ebc, 0x84, 0x1d, 0x93, 0x1d, 0xdc, 0x62, 0x22, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CheckBox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CheckBox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x2649a741, 0x2dcb, 0x4542, 0xb5, 0x4a, 0x84, 0x05, 0x23, 0x76, 0xdf, 0xdc);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.CheckBox.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.CheckBox/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.CheckBox/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2649a741-2dcb-4542-b54a-84052376dfdc")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CheckBox.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<CheckBox, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CheckBox.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CheckBox.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CheckBox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CheckBox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBox
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBoxDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBoxDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass EditItem
	/// Description for Company.DSLBootstrap.EditItem
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditItem.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.EditItem.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("80c8486e-3d26-4443-9337-30e8eee800bd")]
	public partial class EditItem : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EditItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80c8486e, 0x3d26, 0x4443, 0x93, 0x37, 0x30, 0xe8, 0xee, 0xe8, 0x00, 0xbd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EditItem(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EditItem(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x4b1d4c8b, 0x17ed, 0x45d5, 0x89, 0x87, 0x58, 0x82, 0x14, 0xd6, 0x68, 0xb0);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.EditItem.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EditItem/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EditItem/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4b1d4c8b-17ed-45d5-8987-588214d668b0")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EditItem.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<EditItem, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EditItem.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EditItem.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EditItem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EditItem element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Inner opposite domain role accessor
		/// <summary>
		/// Gets or sets Inner.
		/// Description for Company.DSLBootstrap.InnerHasEditItems.EditItem
		/// </summary>
		public virtual Inner Inner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.InnerHasEditItems.EditItemDomainRoleId) as Inner;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.InnerHasEditItems.EditItemDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Columnas
	/// Description for Company.DSLBootstrap.Columnas
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Columnas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Columnas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("af6435d8-4ba0-436f-8cad-287fceb1c246")]
	public partial class Columnas : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Columnas domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf6435d8, 0x4ba0, 0x436f, 0x8c, 0xad, 0x28, 0x7f, 0xce, 0xb1, 0xc2, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Columnas(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Columnas(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x3049b5c2, 0xfd45, 0x489f, 0x81, 0x93, 0xe2, 0x47, 0xad, 0xc5, 0x1c, 0x2a);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Columnas.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Columnas/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Columnas/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3049b5c2-fd45-489f-8193-e247adc51c2a")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Columnas.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Columnas, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Columnas.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Columnas.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Columnas element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Columnas element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for Company.DSLBootstrap.TableHasColumnas.Columnas
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.TableHasColumnas.ColumnasDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.TableHasColumnas.ColumnasDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Renglones
	/// Description for Company.DSLBootstrap.Renglones
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Renglones.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Renglones.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("b3a46eaf-13d1-4d1b-b151-14d3bf7ea4bd")]
	public partial class Renglones : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Renglones domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3a46eaf, 0x13d1, 0x4d1b, 0xb1, 0x51, 0x14, 0xd3, 0xbf, 0x7e, 0xa4, 0xbd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Renglones(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Renglones(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x5b74f29e, 0xe43d, 0x407c, 0xa4, 0xec, 0x4b, 0xf1, 0x8d, 0x71, 0xb6, 0xbf);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Renglones.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Renglones/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Renglones/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5b74f29e-e43d-407c-a4ec-4bf18d71b6bf")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Renglones.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Renglones, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Renglones.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Renglones.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Renglones element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Renglones element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for Company.DSLBootstrap.TableHasRenglones.Renglones
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.TableHasRenglones.RenglonesDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.TableHasRenglones.RenglonesDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnaRenglon opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ColumnaRenglon.
		/// Description for Company.DSLBootstrap.RenglonesHasColumnaRenglon.Renglones
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ColumnaRenglon> ColumnaRenglon
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ColumnaRenglon>, ColumnaRenglon>(global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.RenglonesDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.DSLBootstrap.ColumnaRenglon.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.DSLBootstrap.ColumnaRenglon sourceColumnaRenglon1 = sourceElement as global::Company.DSLBootstrap.ColumnaRenglon;
			if (sourceColumnaRenglon1 != null)
			{
				// Create link for path RenglonesHasColumnaRenglon.ColumnaRenglon
				this.ColumnaRenglon.Add(sourceColumnaRenglon1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.DSLBootstrap.ColumnaRenglon sourceColumnaRenglon1 = sourceElement as global::Company.DSLBootstrap.ColumnaRenglon;
			if (sourceColumnaRenglon1 != null)
			{
				// Delete link for path RenglonesHasColumnaRenglon.ColumnaRenglon
				
				foreach (DslModeling::ElementLink link in global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.GetLinks((global::Company.DSLBootstrap.Renglones)this, sourceColumnaRenglon1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.RenglonesDomainRoleId, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass InnerFormal
	/// Description for Company.DSLBootstrap.InnerFormal
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.InnerFormal.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.InnerFormal.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7df905d7-5eb9-4568-8f2b-599b9d07a2a8")]
	public partial class InnerFormal : Inner
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InnerFormal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7df905d7, 0x5eb9, 0x4568, 0x8f, 0x2b, 0x59, 0x9b, 0x9d, 0x07, 0xa2, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerFormal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerFormal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass InnerBonito
	/// Description for Company.DSLBootstrap.InnerBonito
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.InnerBonito.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.InnerBonito.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("06533187-2b96-47db-869d-612424dfd4e4")]
	public partial class InnerBonito : Inner
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InnerBonito domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06533187, 0x2b96, 0x47db, 0x86, 0x9d, 0x61, 0x24, 0x24, 0xdf, 0xd4, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerBonito(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerBonito(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass TableFormal
	/// Description for Company.DSLBootstrap.TableFormal
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableFormal.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.TableFormal.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("ce4379e1-d681-43a5-9357-4a64889e4bdf")]
	public partial class TableFormal : Table
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TableFormal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce4379e1, 0xd681, 0x43a5, 0x93, 0x57, 0x4a, 0x64, 0x88, 0x9e, 0x4b, 0xdf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TableFormal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TableFormal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x69f85872, 0x870f, 0x4cbe, 0x80, 0xb5, 0x0d, 0x84, 0x0d, 0x8b, 0x11, 0xa7);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.TableFormal.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableFormal/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableFormal/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("69f85872-870f-4cbe-80b5-0d840d8b11a7")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TableFormal.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<TableFormal, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TableFormal.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TableFormal.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TableFormal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TableFormal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass TableBonita
	/// Description for Company.DSLBootstrap.TableBonita
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableBonita.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.TableBonita.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("52535324-7f6e-4f42-90bf-32c48f8dc30c")]
	public partial class TableBonita : Table
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TableBonita domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x52535324, 0x7f6e, 0x4f42, 0x90, 0xbf, 0x32, 0xc4, 0x8f, 0x8d, 0xc3, 0x0c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TableBonita(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TableBonita(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xf554dcca, 0x9291, 0x4a31, 0x9b, 0xc1, 0x6f, 0x4d, 0x84, 0x3e, 0x9f, 0x1a);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.TableBonita.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableBonita/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableBonita/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f554dcca-9291-4a31-9bc1-6f4d843e9f1a")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TableBonita.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<TableBonita, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TableBonita.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TableBonita.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TableBonita element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TableBonita element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass RadioButton
	/// Description for Company.DSLBootstrap.RadioButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.RadioButton.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.RadioButton.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6fb264df-bd0e-42c0-84a0-7ede36a69ad7")]
	public partial class RadioButton : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RadioButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6fb264df, 0xbd0e, 0x42c0, 0x84, 0xa0, 0x7e, 0xde, 0x36, 0xa6, 0x9a, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RadioButton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RadioButton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xd5f7f9ab, 0x3169, 0x44cc, 0xbe, 0x65, 0x60, 0x8f, 0x38, 0x72, 0x8b, 0x00);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.RadioButton.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.RadioButton/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.RadioButton/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5f7f9ab-3169-44cc-be65-608f38728b00")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RadioButton.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<RadioButton, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RadioButton.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RadioButton.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RadioButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RadioButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasRadioButtons.RadioButton
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasRadioButtons.RadioButtonDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasRadioButtons.RadioButtonDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass TextRow
	/// Description for Company.DSLBootstrap.TextRow
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.TextRow.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.TextRow.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("077f3cf8-38d7-4810-9c3b-897227e176a0")]
	public partial class TextRow : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TextRow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x077f3cf8, 0x38d7, 0x4810, 0x9c, 0x3b, 0x89, 0x72, 0x27, 0xe1, 0x76, 0xa0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TextRow(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TextRow(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xe9846fef, 0x2c33, 0x4ad0, 0xaf, 0x5e, 0xdc, 0xef, 0xa6, 0xd6, 0x41, 0xb1);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.TextRow.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TextRow/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TextRow/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e9846fef-2c33-4ad0-af5e-dcefa6d641b1")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TextRow.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<TextRow, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TextRow.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TextRow.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TextRow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TextRow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasTextRows.TextRow
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasTextRows.TextRowDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasTextRows.TextRowDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass Select
	/// Description for Company.DSLBootstrap.Select
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.Select.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.Select.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa74aa4e-18a8-4404-8703-80f7438a78c0")]
	public partial class Select : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Select domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa74aa4e, 0x18a8, 0x4404, 0x87, 0x03, 0x80, 0xf7, 0x43, 0x8a, 0x78, 0xc0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Select(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Select(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xde65b18e, 0x5ece, 0x4d54, 0x86, 0x7c, 0x52, 0x0d, 0xb9, 0xea, 0x58, 0x38);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.Select.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.Select/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.Select/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("de65b18e-5ece-4d54-867c-520db9ea5838")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Select.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Select, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Select.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Select.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Select element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Select element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasSelecting.Select
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasSelecting.SelectDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasSelecting.SelectDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ColumnaRenglon
	/// Description for Company.DSLBootstrap.ColumnaRenglon
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ColumnaRenglon.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ColumnaRenglon.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (TextNombre = {textNombrePropertyStorage})")]
	[DslModeling::DomainObjectId("afb0f3d4-bcf7-42e7-a1d0-ec637bea3a9b")]
	public partial class ColumnaRenglon : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ColumnaRenglon domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xafb0f3d4, 0xbcf7, 0x42e7, 0xa1, 0xd0, 0xec, 0x63, 0x7b, 0xea, 0x3a, 0x9b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ColumnaRenglon(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ColumnaRenglon(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x9105a12d, 0xd7b0, 0x4987, 0xbe, 0x16, 0xf9, 0x97, 0xd3, 0x74, 0x99, 0x08);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ColumnaRenglon.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ColumnaRenglon/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ColumnaRenglon/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9105a12d-d7b0-4987-be16-f997d3749908")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnaRenglon.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnaRenglon, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnaRenglon.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnaRenglon.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnaRenglon element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnaRenglon element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Renglones opposite domain role accessor
		/// <summary>
		/// Gets or sets Renglones.
		/// Description for Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglon
		/// </summary>
		public virtual Renglones Renglones
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId) as Renglones;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ButtonDanger
	/// Description for Company.DSLBootstrap.ButtonDanger
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonDanger.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonDanger.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56f0ebba-1f8d-4de0-8490-15ebc6f3c61d")]
	public partial class ButtonDanger : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ButtonDanger domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56f0ebba, 0x1f8d, 0x4de0, 0x84, 0x90, 0x15, 0xeb, 0xc6, 0xf3, 0xc6, 0x1d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonDanger(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonDanger(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x41ebfa3b, 0x6dd9, 0x46e4, 0x94, 0x90, 0x79, 0xe5, 0xc2, 0x25, 0xed, 0x9d);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ButtonDanger.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonDanger/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonDanger/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("41ebfa3b-6dd9-46e4-9490-79e5c225ed9d")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ButtonDanger.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ButtonDanger, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ButtonDanger.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ButtonDanger.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ButtonDanger element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ButtonDanger element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDanger
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDangerDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDangerDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ButtonInfo
	/// Description for Company.DSLBootstrap.ButtonInfo
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonInfo.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonInfo.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8351b1b7-e86c-4b76-80bf-7f910a01ceb4")]
	public partial class ButtonInfo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ButtonInfo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8351b1b7, 0xe86c, 0x4b76, 0x80, 0xbf, 0x7f, 0x91, 0x0a, 0x01, 0xce, 0xb4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonInfo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonInfo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xfb2d9f16, 0x6295, 0x437c, 0xa3, 0x97, 0xdb, 0xda, 0xda, 0x50, 0xe4, 0x3e);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ButtonInfo.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonInfo/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonInfo/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fb2d9f16-6295-437c-a397-dbdada50e43e")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ButtonInfo.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ButtonInfo, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ButtonInfo.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ButtonInfo.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ButtonInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ButtonInfo element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfo
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfoDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ButtonPrimary
	/// Description for Company.DSLBootstrap.ButtonPrimary
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonPrimary.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonPrimary.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("87ecc104-7424-4521-b905-363150dcbdd9")]
	public partial class ButtonPrimary : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ButtonPrimary domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x87ecc104, 0x7424, 0x4521, 0xb9, 0x05, 0x36, 0x31, 0x50, 0xdc, 0xbd, 0xd9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonPrimary(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonPrimary(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x6845ce7e, 0xb9bc, 0x470e, 0x96, 0x30, 0x24, 0x8d, 0x21, 0xbc, 0x98, 0xf4);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ButtonPrimary.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonPrimary/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonPrimary/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6845ce7e-b9bc-470e-9630-248d21bc98f4")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ButtonPrimary.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ButtonPrimary, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ButtonPrimary.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ButtonPrimary.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ButtonPrimary element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ButtonPrimary element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimary
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ButtonWarning
	/// Description for Company.DSLBootstrap.ButtonWarning
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonWarning.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonWarning.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f00f4a62-5521-4646-8ff3-0783253189b8")]
	public partial class ButtonWarning : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ButtonWarning domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf00f4a62, 0x5521, 0x4646, 0x8f, 0xf3, 0x07, 0x83, 0x25, 0x31, 0x89, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonWarning(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonWarning(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0x3df35349, 0x61ae, 0x4255, 0xb1, 0xf2, 0xb1, 0x9f, 0x61, 0x2e, 0xad, 0x9b);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ButtonWarning.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonWarning/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonWarning/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3df35349-61ae-4255-b1f2-b19f612ead9b")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ButtonWarning.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ButtonWarning, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ButtonWarning.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ButtonWarning.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ButtonWarning element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ButtonWarning element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarning
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarningDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarningDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass ButtonSuccess
	/// Description for Company.DSLBootstrap.ButtonSuccess
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonSuccess.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonSuccess.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6272d496-2ce2-470b-9c8f-9aa3dce90779")]
	public partial class ButtonSuccess : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ButtonSuccess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6272d496, 0x2ce2, 0x470b, 0x9c, 0x8f, 0x9a, 0xa3, 0xdc, 0xe9, 0x07, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonSuccess(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ButtonSuccess(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextNombre domain property code
		
		/// <summary>
		/// TextNombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNombreDomainPropertyId = new global::System.Guid(0xbfd8f6b5, 0x5d09, 0x4e07, 0x92, 0x59, 0xb8, 0x01, 0x7b, 0x33, 0x78, 0xb3);
		
		/// <summary>
		/// Storage for TextNombre
		/// </summary>
		private global::System.String textNombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextNombre domain property.
		/// Description for Company.DSLBootstrap.ButtonSuccess.Text Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.ButtonSuccess/TextNombre.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.ButtonSuccess/TextNombre.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bfd8f6b5-5d09-4e07-9259-b8017b3378b3")]
		public global::System.String TextNombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ButtonSuccess.TextNombre domain property.
		/// </summary>
		internal sealed partial class TextNombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ButtonSuccess, global::System.String>
		{
			private TextNombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ButtonSuccess.TextNombre domain property value handler.
			/// </summary>
			public static readonly TextNombrePropertyHandler Instance = new TextNombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ButtonSuccess.TextNombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ButtonSuccess element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ButtonSuccess element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccess
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass EntradaEmail
	/// Description for Company.DSLBootstrap.EntradaEmail
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.EntradaEmail.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.EntradaEmail.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("079a522e-0dfc-4d0c-8b34-e8163b67863a")]
	public partial class EntradaEmail : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntradaEmail domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x079a522e, 0x0dfc, 0x4d0c, 0x8b, 0x34, 0xe8, 0x16, 0x3b, 0x67, 0x86, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntradaEmail(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntradaEmail(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextName domain property code
		
		/// <summary>
		/// TextName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNameDomainPropertyId = new global::System.Guid(0xc06117f8, 0x41f6, 0x4a71, 0xb0, 0x93, 0x88, 0x84, 0xed, 0x1e, 0x92, 0xde);
		
		/// <summary>
		/// Storage for TextName
		/// </summary>
		private global::System.String textNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextName domain property.
		/// Description for Company.DSLBootstrap.EntradaEmail.Text Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EntradaEmail/TextName.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EntradaEmail/TextName.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c06117f8-41f6-4a71-b093-8884ed1e92de")]
		public global::System.String TextName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntradaEmail.TextName domain property.
		/// </summary>
		internal sealed partial class TextNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntradaEmail, global::System.String>
		{
			private TextNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntradaEmail.TextName domain property value handler.
			/// </summary>
			public static readonly TextNamePropertyHandler Instance = new TextNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntradaEmail.TextName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntradaEmail element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntradaEmail element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmail
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmailDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmailDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainClass EntradaPassword
	/// Description for Company.DSLBootstrap.EntradaPassword
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.EntradaPassword.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.EntradaPassword.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("75c96c16-76fa-4223-89da-e77c5ad33cf9")]
	public partial class EntradaPassword : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntradaPassword domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75c96c16, 0x76fa, 0x4223, 0x89, 0xda, 0xe7, 0x7c, 0x5a, 0xd3, 0x3c, 0xf9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntradaPassword(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntradaPassword(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TextName domain property code
		
		/// <summary>
		/// TextName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextNameDomainPropertyId = new global::System.Guid(0x2642397a, 0x50ab, 0x40b7, 0xb6, 0x3b, 0xee, 0xb5, 0xa3, 0x63, 0xc6, 0x4d);
		
		/// <summary>
		/// Storage for TextName
		/// </summary>
		private global::System.String textNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TextName domain property.
		/// Description for Company.DSLBootstrap.EntradaPassword.Text Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.EntradaPassword/TextName.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.EntradaPassword/TextName.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2642397a-50ab-40b7-b63b-eeb5a363c64d")]
		public global::System.String TextName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntradaPassword.TextName domain property.
		/// </summary>
		internal sealed partial class TextNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntradaPassword, global::System.String>
		{
			private TextNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntradaPassword.TextName domain property value handler.
			/// </summary>
			public static readonly TextNamePropertyHandler Instance = new TextNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntradaPassword.TextName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntradaPassword element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntradaPassword element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Formulario opposite domain role accessor
		/// <summary>
		/// Gets or sets Formulario.
		/// Description for
		/// Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPassword
		/// </summary>
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId) as Formulario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId, value);
			}
		}
		#endregion
	}
}
