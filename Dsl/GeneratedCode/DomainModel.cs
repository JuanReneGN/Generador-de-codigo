//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainModel DSLBootstrapDomainModel
	/// Description for Company.DSLBootstrap.DSLBootstrap
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.DSLBootstrapDomainModel.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.DSLBootstrapDomainModel.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("47a3dfa8-e651-432e-ac35-9a359b51fd99")]
	public partial class DSLBootstrapDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// DSLBootstrapDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x47a3dfa8, 0xe651, 0x432e, 0xac, 0x35, 0x9a, 0x35, 0x9b, 0x51, 0xfd, 0x99);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public DSLBootstrapDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(PaginaWeb),
				typeof(EditButton),
				typeof(Formulario),
				typeof(Table),
				typeof(Inner),
				typeof(Entrada),
				typeof(Etiquetas),
				typeof(Barradeprogreso),
				typeof(FormularioFormal),
				typeof(FormularioBonito),
				typeof(CheckBox),
				typeof(EditItem),
				typeof(Columnas),
				typeof(Renglones),
				typeof(InnerFormal),
				typeof(InnerBonito),
				typeof(TableFormal),
				typeof(TableBonita),
				typeof(RadioButton),
				typeof(TextRow),
				typeof(Select),
				typeof(ColumnaRenglon),
				typeof(ButtonDanger),
				typeof(ButtonInfo),
				typeof(ButtonPrimary),
				typeof(ButtonWarning),
				typeof(ButtonSuccess),
				typeof(EntradaEmail),
				typeof(EntradaPassword),
				typeof(PaginaWebHasFormulario),
				typeof(FormularioBonitoTieneEditButtons),
				typeof(FormularioHasEntrada),
				typeof(FormularioHasEtiquetas),
				typeof(FormularioHasBarradeprogreso),
				typeof(PaginaWebHasInners),
				typeof(FormularioHasCheckBoxes),
				typeof(PaginaWebHasTables),
				typeof(InnerHasEditItems),
				typeof(TableHasRenglones),
				typeof(FormularioHasRadioButtons),
				typeof(FormularioHasTextRows),
				typeof(FormularioHasSelecting),
				typeof(TableHasColumnas),
				typeof(RenglonesHasColumnaRenglon),
				typeof(FormularioHasButtonDangers),
				typeof(FormularioHasButtonInfo),
				typeof(FormularioHasButtonPrimaries),
				typeof(FormularioHasButtonWarnings),
				typeof(FormularioHasButtonSuccesses),
				typeof(FormularioHasEntradaEmails),
				typeof(FormularioHasEntradaPasswords),
				typeof(DSLBootstrapDiagram),
				typeof(FEditItem),
				typeof(Fbutton),
				typeof(FBarradeprogreso),
				typeof(FEtiqueta),
				typeof(Fentrada),
				typeof(FCheckBox),
				typeof(FRadioButton),
				typeof(FTextRow),
				typeof(FSelect),
				typeof(FFormularioFormal),
				typeof(FinnerFormal),
				typeof(FinnerBonito),
				typeof(FFormularioBonito),
				typeof(FColumna),
				typeof(FTableBonita),
				typeof(FColumnaRenglon),
				typeof(FRenglon),
				typeof(FTableFormal),
				typeof(FButtonPrimary),
				typeof(FButtonInfo),
				typeof(FButtonWarning),
				typeof(FButtonDanger),
				typeof(FButtonSuccess),
				typeof(FEntradaEmail),
				typeof(FEntradaPassword),
				typeof(global::Company.DSLBootstrap.FixUpDiagram),
				typeof(global::Company.DSLBootstrap.DecoratorPropertyChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(EditButton), "onClick", EditButton.onClickDomainPropertyId, typeof(EditButton.onClickPropertyHandler)),
				new DomainMemberInfo(typeof(EditButton), "EditColor", EditButton.EditColorDomainPropertyId, typeof(EditButton.EditColorPropertyHandler)),
				new DomainMemberInfo(typeof(EditButton), "Icon", EditButton.IconDomainPropertyId, typeof(EditButton.IconPropertyHandler)),
				new DomainMemberInfo(typeof(EditButton), "TextName", EditButton.TextNameDomainPropertyId, typeof(EditButton.TextNamePropertyHandler)),
				new DomainMemberInfo(typeof(Inner), "TextNombre", Inner.TextNombreDomainPropertyId, typeof(Inner.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Entrada), "Input", Entrada.InputDomainPropertyId, typeof(Entrada.InputPropertyHandler)),
				new DomainMemberInfo(typeof(Entrada), "TextName", Entrada.TextNameDomainPropertyId, typeof(Entrada.TextNamePropertyHandler)),
				new DomainMemberInfo(typeof(Etiquetas), "TextNombre", Etiquetas.TextNombreDomainPropertyId, typeof(Etiquetas.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Etiquetas), "EditColor", Etiquetas.EditColorDomainPropertyId, typeof(Etiquetas.EditColorPropertyHandler)),
				new DomainMemberInfo(typeof(Etiquetas), "Output", Etiquetas.OutputDomainPropertyId, typeof(Etiquetas.OutputPropertyHandler)),
				new DomainMemberInfo(typeof(Etiquetas), "EstiloLetra", Etiquetas.EstiloLetraDomainPropertyId, typeof(Etiquetas.EstiloLetraPropertyHandler)),
				new DomainMemberInfo(typeof(Barradeprogreso), "TextNombre", Barradeprogreso.TextNombreDomainPropertyId, typeof(Barradeprogreso.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Barradeprogreso), "Max", Barradeprogreso.MaxDomainPropertyId, typeof(Barradeprogreso.MaxPropertyHandler)),
				new DomainMemberInfo(typeof(Barradeprogreso), "EditColor", Barradeprogreso.EditColorDomainPropertyId, typeof(Barradeprogreso.EditColorPropertyHandler)),
				new DomainMemberInfo(typeof(Barradeprogreso), "Min", Barradeprogreso.MinDomainPropertyId, typeof(Barradeprogreso.MinPropertyHandler)),
				new DomainMemberInfo(typeof(FormularioFormal), "TextNombre", FormularioFormal.TextNombreDomainPropertyId, typeof(FormularioFormal.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(FormularioBonito), "TextNombre", FormularioBonito.TextNombreDomainPropertyId, typeof(FormularioBonito.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(CheckBox), "TextNombre", CheckBox.TextNombreDomainPropertyId, typeof(CheckBox.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(EditItem), "TextNombre", EditItem.TextNombreDomainPropertyId, typeof(EditItem.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Columnas), "TextNombre", Columnas.TextNombreDomainPropertyId, typeof(Columnas.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Renglones), "TextNombre", Renglones.TextNombreDomainPropertyId, typeof(Renglones.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(TableFormal), "TextNombre", TableFormal.TextNombreDomainPropertyId, typeof(TableFormal.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(TableBonita), "TextNombre", TableBonita.TextNombreDomainPropertyId, typeof(TableBonita.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(RadioButton), "TextNombre", RadioButton.TextNombreDomainPropertyId, typeof(RadioButton.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(TextRow), "TextNombre", TextRow.TextNombreDomainPropertyId, typeof(TextRow.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(Select), "TextNombre", Select.TextNombreDomainPropertyId, typeof(Select.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ColumnaRenglon), "TextNombre", ColumnaRenglon.TextNombreDomainPropertyId, typeof(ColumnaRenglon.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ButtonDanger), "TextNombre", ButtonDanger.TextNombreDomainPropertyId, typeof(ButtonDanger.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ButtonInfo), "TextNombre", ButtonInfo.TextNombreDomainPropertyId, typeof(ButtonInfo.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ButtonPrimary), "TextNombre", ButtonPrimary.TextNombreDomainPropertyId, typeof(ButtonPrimary.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ButtonWarning), "TextNombre", ButtonWarning.TextNombreDomainPropertyId, typeof(ButtonWarning.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(ButtonSuccess), "TextNombre", ButtonSuccess.TextNombreDomainPropertyId, typeof(ButtonSuccess.TextNombrePropertyHandler)),
				new DomainMemberInfo(typeof(EntradaEmail), "TextName", EntradaEmail.TextNameDomainPropertyId, typeof(EntradaEmail.TextNamePropertyHandler)),
				new DomainMemberInfo(typeof(EntradaPassword), "TextName", EntradaPassword.TextNameDomainPropertyId, typeof(EntradaPassword.TextNamePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(PaginaWebHasFormulario), "PaginaWeb", PaginaWebHasFormulario.PaginaWebDomainRoleId),
				new DomainRolePlayerInfo(typeof(PaginaWebHasFormulario), "Formulario", PaginaWebHasFormulario.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioBonitoTieneEditButtons), "Formulario", FormularioBonitoTieneEditButtons.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioBonitoTieneEditButtons), "EditButton", FormularioBonitoTieneEditButtons.EditButtonDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntrada), "Formulario", FormularioHasEntrada.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntrada), "Entrada", FormularioHasEntrada.EntradaDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEtiquetas), "Formulario", FormularioHasEtiquetas.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEtiquetas), "Etiquetas", FormularioHasEtiquetas.EtiquetasDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasBarradeprogreso), "Formulario", FormularioHasBarradeprogreso.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasBarradeprogreso), "Barradeprogreso", FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId),
				new DomainRolePlayerInfo(typeof(PaginaWebHasInners), "PaginaWeb", PaginaWebHasInners.PaginaWebDomainRoleId),
				new DomainRolePlayerInfo(typeof(PaginaWebHasInners), "Inner", PaginaWebHasInners.InnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasCheckBoxes), "Formulario", FormularioHasCheckBoxes.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasCheckBoxes), "CheckBox", FormularioHasCheckBoxes.CheckBoxDomainRoleId),
				new DomainRolePlayerInfo(typeof(PaginaWebHasTables), "PaginaWeb", PaginaWebHasTables.PaginaWebDomainRoleId),
				new DomainRolePlayerInfo(typeof(PaginaWebHasTables), "Table", PaginaWebHasTables.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerHasEditItems), "Inner", InnerHasEditItems.InnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerHasEditItems), "EditItem", InnerHasEditItems.EditItemDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableHasRenglones), "Table", TableHasRenglones.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableHasRenglones), "Renglones", TableHasRenglones.RenglonesDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasRadioButtons), "Formulario", FormularioHasRadioButtons.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasRadioButtons), "RadioButton", FormularioHasRadioButtons.RadioButtonDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasTextRows), "Formulario", FormularioHasTextRows.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasTextRows), "TextRow", FormularioHasTextRows.TextRowDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasSelecting), "Formulario", FormularioHasSelecting.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasSelecting), "Select", FormularioHasSelecting.SelectDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableHasColumnas), "Table", TableHasColumnas.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableHasColumnas), "Columnas", TableHasColumnas.ColumnasDomainRoleId),
				new DomainRolePlayerInfo(typeof(RenglonesHasColumnaRenglon), "Renglones", RenglonesHasColumnaRenglon.RenglonesDomainRoleId),
				new DomainRolePlayerInfo(typeof(RenglonesHasColumnaRenglon), "ColumnaRenglon", RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonDangers), "Formulario", FormularioHasButtonDangers.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonDangers), "ButtonDanger", FormularioHasButtonDangers.ButtonDangerDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonInfo), "Formulario", FormularioHasButtonInfo.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonInfo), "ButtonInfo", FormularioHasButtonInfo.ButtonInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonPrimaries), "Formulario", FormularioHasButtonPrimaries.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonPrimaries), "ButtonPrimary", FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonWarnings), "Formulario", FormularioHasButtonWarnings.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonWarnings), "ButtonWarning", FormularioHasButtonWarnings.ButtonWarningDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonSuccesses), "Formulario", FormularioHasButtonSuccesses.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasButtonSuccesses), "ButtonSuccess", FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntradaEmails), "Formulario", FormularioHasEntradaEmails.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntradaEmails), "EntradaEmail", FormularioHasEntradaEmails.EntradaEmailDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntradaPasswords), "Formulario", FormularioHasEntradaPasswords.FormularioDomainRoleId),
				new DomainRolePlayerInfo(typeof(FormularioHasEntradaPasswords), "EntradaPassword", FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(55);
				createElementMap.Add(typeof(PaginaWeb), 0);
				createElementMap.Add(typeof(EditButton), 1);
				createElementMap.Add(typeof(Formulario), 2);
				createElementMap.Add(typeof(Table), 3);
				createElementMap.Add(typeof(Inner), 4);
				createElementMap.Add(typeof(Entrada), 5);
				createElementMap.Add(typeof(Etiquetas), 6);
				createElementMap.Add(typeof(Barradeprogreso), 7);
				createElementMap.Add(typeof(FormularioFormal), 8);
				createElementMap.Add(typeof(FormularioBonito), 9);
				createElementMap.Add(typeof(CheckBox), 10);
				createElementMap.Add(typeof(EditItem), 11);
				createElementMap.Add(typeof(Columnas), 12);
				createElementMap.Add(typeof(Renglones), 13);
				createElementMap.Add(typeof(InnerFormal), 14);
				createElementMap.Add(typeof(InnerBonito), 15);
				createElementMap.Add(typeof(TableFormal), 16);
				createElementMap.Add(typeof(TableBonita), 17);
				createElementMap.Add(typeof(RadioButton), 18);
				createElementMap.Add(typeof(TextRow), 19);
				createElementMap.Add(typeof(Select), 20);
				createElementMap.Add(typeof(ColumnaRenglon), 21);
				createElementMap.Add(typeof(ButtonDanger), 22);
				createElementMap.Add(typeof(ButtonInfo), 23);
				createElementMap.Add(typeof(ButtonPrimary), 24);
				createElementMap.Add(typeof(ButtonWarning), 25);
				createElementMap.Add(typeof(ButtonSuccess), 26);
				createElementMap.Add(typeof(EntradaEmail), 27);
				createElementMap.Add(typeof(EntradaPassword), 28);
				createElementMap.Add(typeof(DSLBootstrapDiagram), 29);
				createElementMap.Add(typeof(FEditItem), 30);
				createElementMap.Add(typeof(Fbutton), 31);
				createElementMap.Add(typeof(FBarradeprogreso), 32);
				createElementMap.Add(typeof(FEtiqueta), 33);
				createElementMap.Add(typeof(Fentrada), 34);
				createElementMap.Add(typeof(FCheckBox), 35);
				createElementMap.Add(typeof(FRadioButton), 36);
				createElementMap.Add(typeof(FTextRow), 37);
				createElementMap.Add(typeof(FSelect), 38);
				createElementMap.Add(typeof(FFormularioFormal), 39);
				createElementMap.Add(typeof(FinnerFormal), 40);
				createElementMap.Add(typeof(FinnerBonito), 41);
				createElementMap.Add(typeof(FFormularioBonito), 42);
				createElementMap.Add(typeof(FColumna), 43);
				createElementMap.Add(typeof(FTableBonita), 44);
				createElementMap.Add(typeof(FColumnaRenglon), 45);
				createElementMap.Add(typeof(FRenglon), 46);
				createElementMap.Add(typeof(FTableFormal), 47);
				createElementMap.Add(typeof(FButtonPrimary), 48);
				createElementMap.Add(typeof(FButtonInfo), 49);
				createElementMap.Add(typeof(FButtonWarning), 50);
				createElementMap.Add(typeof(FButtonDanger), 51);
				createElementMap.Add(typeof(FButtonSuccess), 52);
				createElementMap.Add(typeof(FEntradaEmail), 53);
				createElementMap.Add(typeof(FEntradaPassword), 54);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.DSLBootstrap.DSLBootstrapDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new PaginaWeb(partition, propertyAssignments);
				case 1: return new EditButton(partition, propertyAssignments);
				case 2: return new Formulario(partition, propertyAssignments);
				case 3: return new Table(partition, propertyAssignments);
				case 4: return new Inner(partition, propertyAssignments);
				case 5: return new Entrada(partition, propertyAssignments);
				case 6: return new Etiquetas(partition, propertyAssignments);
				case 7: return new Barradeprogreso(partition, propertyAssignments);
				case 8: return new FormularioFormal(partition, propertyAssignments);
				case 9: return new FormularioBonito(partition, propertyAssignments);
				case 10: return new CheckBox(partition, propertyAssignments);
				case 11: return new EditItem(partition, propertyAssignments);
				case 12: return new Columnas(partition, propertyAssignments);
				case 13: return new Renglones(partition, propertyAssignments);
				case 14: return new InnerFormal(partition, propertyAssignments);
				case 15: return new InnerBonito(partition, propertyAssignments);
				case 16: return new TableFormal(partition, propertyAssignments);
				case 17: return new TableBonita(partition, propertyAssignments);
				case 18: return new RadioButton(partition, propertyAssignments);
				case 19: return new TextRow(partition, propertyAssignments);
				case 20: return new Select(partition, propertyAssignments);
				case 21: return new ColumnaRenglon(partition, propertyAssignments);
				case 22: return new ButtonDanger(partition, propertyAssignments);
				case 23: return new ButtonInfo(partition, propertyAssignments);
				case 24: return new ButtonPrimary(partition, propertyAssignments);
				case 25: return new ButtonWarning(partition, propertyAssignments);
				case 26: return new ButtonSuccess(partition, propertyAssignments);
				case 27: return new EntradaEmail(partition, propertyAssignments);
				case 28: return new EntradaPassword(partition, propertyAssignments);
				case 29: return new DSLBootstrapDiagram(partition, propertyAssignments);
				case 30: return new FEditItem(partition, propertyAssignments);
				case 31: return new Fbutton(partition, propertyAssignments);
				case 32: return new FBarradeprogreso(partition, propertyAssignments);
				case 33: return new FEtiqueta(partition, propertyAssignments);
				case 34: return new Fentrada(partition, propertyAssignments);
				case 35: return new FCheckBox(partition, propertyAssignments);
				case 36: return new FRadioButton(partition, propertyAssignments);
				case 37: return new FTextRow(partition, propertyAssignments);
				case 38: return new FSelect(partition, propertyAssignments);
				case 39: return new FFormularioFormal(partition, propertyAssignments);
				case 40: return new FinnerFormal(partition, propertyAssignments);
				case 41: return new FinnerBonito(partition, propertyAssignments);
				case 42: return new FFormularioBonito(partition, propertyAssignments);
				case 43: return new FColumna(partition, propertyAssignments);
				case 44: return new FTableBonita(partition, propertyAssignments);
				case 45: return new FColumnaRenglon(partition, propertyAssignments);
				case 46: return new FRenglon(partition, propertyAssignments);
				case 47: return new FTableFormal(partition, propertyAssignments);
				case 48: return new FButtonPrimary(partition, propertyAssignments);
				case 49: return new FButtonInfo(partition, propertyAssignments);
				case 50: return new FButtonWarning(partition, propertyAssignments);
				case 51: return new FButtonDanger(partition, propertyAssignments);
				case 52: return new FButtonSuccess(partition, propertyAssignments);
				case 53: return new FEntradaEmail(partition, propertyAssignments);
				case 54: return new FEntradaPassword(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(22);
				createElementLinkMap.Add(typeof(PaginaWebHasFormulario), 0);
				createElementLinkMap.Add(typeof(FormularioBonitoTieneEditButtons), 1);
				createElementLinkMap.Add(typeof(FormularioHasEntrada), 2);
				createElementLinkMap.Add(typeof(FormularioHasEtiquetas), 3);
				createElementLinkMap.Add(typeof(FormularioHasBarradeprogreso), 4);
				createElementLinkMap.Add(typeof(PaginaWebHasInners), 5);
				createElementLinkMap.Add(typeof(FormularioHasCheckBoxes), 6);
				createElementLinkMap.Add(typeof(PaginaWebHasTables), 7);
				createElementLinkMap.Add(typeof(InnerHasEditItems), 8);
				createElementLinkMap.Add(typeof(TableHasRenglones), 9);
				createElementLinkMap.Add(typeof(FormularioHasRadioButtons), 10);
				createElementLinkMap.Add(typeof(FormularioHasTextRows), 11);
				createElementLinkMap.Add(typeof(FormularioHasSelecting), 12);
				createElementLinkMap.Add(typeof(TableHasColumnas), 13);
				createElementLinkMap.Add(typeof(RenglonesHasColumnaRenglon), 14);
				createElementLinkMap.Add(typeof(FormularioHasButtonDangers), 15);
				createElementLinkMap.Add(typeof(FormularioHasButtonInfo), 16);
				createElementLinkMap.Add(typeof(FormularioHasButtonPrimaries), 17);
				createElementLinkMap.Add(typeof(FormularioHasButtonWarnings), 18);
				createElementLinkMap.Add(typeof(FormularioHasButtonSuccesses), 19);
				createElementLinkMap.Add(typeof(FormularioHasEntradaEmails), 20);
				createElementLinkMap.Add(typeof(FormularioHasEntradaPasswords), 21);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.DSLBootstrap.DSLBootstrapDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new PaginaWebHasFormulario(partition, roleAssignments, propertyAssignments);
				case 1: return new FormularioBonitoTieneEditButtons(partition, roleAssignments, propertyAssignments);
				case 2: return new FormularioHasEntrada(partition, roleAssignments, propertyAssignments);
				case 3: return new FormularioHasEtiquetas(partition, roleAssignments, propertyAssignments);
				case 4: return new FormularioHasBarradeprogreso(partition, roleAssignments, propertyAssignments);
				case 5: return new PaginaWebHasInners(partition, roleAssignments, propertyAssignments);
				case 6: return new FormularioHasCheckBoxes(partition, roleAssignments, propertyAssignments);
				case 7: return new PaginaWebHasTables(partition, roleAssignments, propertyAssignments);
				case 8: return new InnerHasEditItems(partition, roleAssignments, propertyAssignments);
				case 9: return new TableHasRenglones(partition, roleAssignments, propertyAssignments);
				case 10: return new FormularioHasRadioButtons(partition, roleAssignments, propertyAssignments);
				case 11: return new FormularioHasTextRows(partition, roleAssignments, propertyAssignments);
				case 12: return new FormularioHasSelecting(partition, roleAssignments, propertyAssignments);
				case 13: return new TableHasColumnas(partition, roleAssignments, propertyAssignments);
				case 14: return new RenglonesHasColumnaRenglon(partition, roleAssignments, propertyAssignments);
				case 15: return new FormularioHasButtonDangers(partition, roleAssignments, propertyAssignments);
				case 16: return new FormularioHasButtonInfo(partition, roleAssignments, propertyAssignments);
				case 17: return new FormularioHasButtonPrimaries(partition, roleAssignments, propertyAssignments);
				case 18: return new FormularioHasButtonWarnings(partition, roleAssignments, propertyAssignments);
				case 19: return new FormularioHasButtonSuccesses(partition, roleAssignments, propertyAssignments);
				case 20: return new FormularioHasEntradaEmails(partition, roleAssignments, propertyAssignments);
				case 21: return new FormularioHasEntradaPasswords(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Company.DSLBootstrap.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DSLBootstrapDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (DSLBootstrapDomainModel.resourceManager == null)
				{
					DSLBootstrapDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(DSLBootstrapDomainModel).Assembly);
				}
				return DSLBootstrapDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return DSLBootstrapDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return DSLBootstrapDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DSLBootstrapDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new DSLBootstrapCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					DSLBootstrapDomainModel.copyClosure = copyFilter;
				}
				return DSLBootstrapDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DSLBootstrapDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new DSLBootstrapDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					DSLBootstrapDomainModel.removeClosure = removeFilter;
				}
				return DSLBootstrapDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Company.DSLBootstrap.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Company.DSLBootstrap.DecoratorPropertyChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Company.DSLBootstrap.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Company.DSLBootstrap.DecoratorPropertyChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DSLBootstrapDeleteClosure : DSLBootstrapDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DSLBootstrapDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DSLBootstrapDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public DSLBootstrapDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Company.DSLBootstrap.PaginaWebHasFormulario.FormularioDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButtonDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasEntrada.EntradaDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasEtiquetas.EtiquetasDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.PaginaWebHasInners.InnerDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBoxDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.PaginaWebHasTables.TableDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.InnerHasEditItems.EditItemDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.TableHasRenglones.RenglonesDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasRadioButtons.RadioButtonDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasTextRows.TextRowDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasSelecting.SelectDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.TableHasColumnas.ColumnasDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDangerDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfoDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarningDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmailDomainRoleId, true);
			DomainRoles.Add(global::Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DSLBootstrapCopyClosure : DSLBootstrapCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DSLBootstrapCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DSLBootstrapCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DSLBootstrapCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

