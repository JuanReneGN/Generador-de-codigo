//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship PaginaWebHasFormulario
	/// Description for Company.DSLBootstrap.PaginaWebHasFormulario
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasFormulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasFormulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("44769029-f150-4bdc-ac89-4999b65c61c6")]
	public partial class PaginaWebHasFormulario : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PaginaWebHasFormulario domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44769029, 0xf150, 0x4bdc, 0xac, 0x89, 0x49, 0x99, 0xb6, 0x5c, 0x61, 0xc6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PaginaWebHasFormulario link in the same Partition as the given PaginaWeb
		/// </summary>
		/// <param name="source">PaginaWeb to use as the source of the relationship.</param>
		/// <param name="target">Formulario to use as the target of the relationship.</param>
		public PaginaWebHasFormulario(PaginaWeb source, Formulario target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PaginaWebHasFormulario.PaginaWebDomainRoleId, source), new DslModeling::RoleAssignment(PaginaWebHasFormulario.FormularioDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasFormulario(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasFormulario(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasFormulario(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasFormulario(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PaginaWeb domain role code
		
		/// <summary>
		/// PaginaWeb domain role Id.
		/// </summary>
		public static readonly global::System.Guid PaginaWebDomainRoleId = new global::System.Guid(0x949559a4, 0x8bf5, 0x47b6, 0x8b, 0x40, 0x32, 0x44, 0x18, 0x23, 0xb5, 0x8e);
		
		/// <summary>
		/// DomainRole PaginaWeb
		/// Description for Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWeb
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasFormulario/PaginaWeb.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasFormulario/PaginaWeb.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasFormulario/PaginaWeb.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("949559a4-8bf5-47b6-8b40-32441823b58e")]
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PaginaWeb)DslModeling::DomainRoleInfo.GetRolePlayer(this, PaginaWebDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PaginaWebDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PaginaWeb of a Formulario
		/// <summary>
		/// Gets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PaginaWeb GetPaginaWeb(Formulario element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FormularioDomainRoleId) as PaginaWeb;
		}
		
		/// <summary>
		/// Sets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPaginaWeb(Formulario element, PaginaWeb newPaginaWeb)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FormularioDomainRoleId, newPaginaWeb);
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x66693b64, 0xa696, 0x4f76, 0xb6, 0x9f, 0x39, 0x8e, 0x70, 0xb7, 0x6f, 0xef);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.PaginaWebHasFormulario.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasFormulario/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasFormulario/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PaginaWeb", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasFormulario/Formulario.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("66693b64-a696-4f76-b69f-398e70b76fef")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a PaginaWeb
		/// <summary>
		/// Gets a list of Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Formulario> GetFormulario(PaginaWeb element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Formulario>, Formulario>(element, PaginaWebDomainRoleId);
		}
		#endregion
		#region PaginaWeb link accessor
		/// <summary>
		/// Get the list of PaginaWebHasFormulario links to a PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasFormulario> GetLinksToFormulario ( global::Company.DSLBootstrap.PaginaWeb paginaWebInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasFormulario>(paginaWebInstance, global::Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWebDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the PaginaWebHasFormulario link to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasFormulario GetLinkToPaginaWeb (global::Company.DSLBootstrap.Formulario formularioInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasFormulario> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasFormulario>(formularioInstance, global::Company.DSLBootstrap.PaginaWebHasFormulario.FormularioDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Formulario not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PaginaWebHasFormulario instance accessors
		
		/// <summary>
		/// Get any PaginaWebHasFormulario links between a given PaginaWeb and a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasFormulario> GetLinks( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Formulario target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasFormulario> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasFormulario>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasFormulario> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasFormulario>(source, global::Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasFormulario link in links )
			{
				if ( target.Equals(link.Formulario) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PaginaWebHasFormulario link between a given PaginaWeband a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasFormulario GetLink( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Formulario target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasFormulario> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasFormulario>(source, global::Company.DSLBootstrap.PaginaWebHasFormulario.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasFormulario link in links )
			{
				if ( target.Equals(link.Formulario) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioBonitoTieneEditButtons
	/// Description for Company.DSLBootstrap.FormularioBonitoTieneEditButtons
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("43515042-6fcd-49ca-b521-8b370169cc5c")]
	public partial class FormularioBonitoTieneEditButtons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioBonitoTieneEditButtons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43515042, 0x6fcd, 0x49ca, 0xb5, 0x21, 0x8b, 0x37, 0x01, 0x69, 0xcc, 0x5c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioBonitoTieneEditButtons link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">EditButton to use as the target of the relationship.</param>
		public FormularioBonitoTieneEditButtons(Formulario source, EditButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioBonitoTieneEditButtons.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioBonitoTieneEditButtons.EditButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioBonitoTieneEditButtons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioBonitoTieneEditButtons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioBonitoTieneEditButtons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioBonitoTieneEditButtons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x55a9c547, 0xe84c, 0x467e, 0x9e, 0x55, 0xb7, 0xaa, 0x89, 0x62, 0xc6, 0xca);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioBonitoTieneEditButtons.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EditButtons", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioBonitoTieneEditButtons/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("55a9c547-e84c-467e-9e55-b7aa8962c6ca")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a EditButton
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(EditButton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EditButtonDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(EditButton element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EditButtonDomainRoleId, newFormulario);
		}
		#endregion
		#region EditButton domain role code
		
		/// <summary>
		/// EditButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid EditButtonDomainRoleId = new global::System.Guid(0x24d0c77d, 0x4825, 0x4cf5, 0xae, 0x5a, 0xb0, 0xbf, 0x44, 0x28, 0xb6, 0xd0);
		
		/// <summary>
		/// DomainRole EditButton
		/// Description for Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons/EditButton.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioBonitoTieneEditButtons/EditButton.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioBonitoTieneEditButtons/EditButton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("24d0c77d-4825-4cf5-ae5a-b0bf4428b6d0")]
		public virtual EditButton EditButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EditButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, EditButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EditButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EditButtons of a Formulario
		/// <summary>
		/// Gets a list of EditButtons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EditButton> GetEditButtons(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EditButton>, EditButton>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioBonitoTieneEditButtons links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> GetLinksToEditButtons ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons>(formularioInstance, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.FormularioDomainRoleId);
		}
		#endregion
		#region EditButton link accessor
		/// <summary>
		/// Get the FormularioBonitoTieneEditButtons link to a EditButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons GetLinkToFormulario (global::Company.DSLBootstrap.EditButton editButtonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons>(editButtonInstance, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.EditButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EditButton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioBonitoTieneEditButtons instance accessors
		
		/// <summary>
		/// Get any FormularioBonitoTieneEditButtons links between a given Formulario and a EditButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EditButton target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons>(source, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons link in links )
			{
				if ( target.Equals(link.EditButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioBonitoTieneEditButtons link between a given Formularioand a EditButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EditButton target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons>(source, global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioBonitoTieneEditButtons link in links )
			{
				if ( target.Equals(link.EditButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasEntrada
	/// Description for Company.DSLBootstrap.FormularioHasEntrada
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntrada.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntrada.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c0c3e02f-58b4-4be1-a4e9-74abf70c4657")]
	public partial class FormularioHasEntrada : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasEntrada domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0c3e02f, 0x58b4, 0x4be1, 0xa4, 0xe9, 0x74, 0xab, 0xf7, 0x0c, 0x46, 0x57);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasEntrada link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">Entrada to use as the target of the relationship.</param>
		public FormularioHasEntrada(Formulario source, Entrada target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasEntrada.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasEntrada.EntradaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntrada(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntrada(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntrada(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntrada(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x01a23927, 0xfd1c, 0x47de, 0xb0, 0xfb, 0x38, 0x5a, 0xde, 0xc9, 0x92, 0xd5);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasEntrada.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntrada/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntrada/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entrada", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntrada/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("01a23927-fd1c-47de-b0fb-385adec992d5")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a Entrada
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(Entrada element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntradaDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(Entrada element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntradaDomainRoleId, newFormulario);
		}
		#endregion
		#region Entrada domain role code
		
		/// <summary>
		/// Entrada domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntradaDomainRoleId = new global::System.Guid(0x8271a773, 0xb0d1, 0x4d08, 0x8e, 0x7b, 0xc9, 0x52, 0x65, 0x58, 0xd1, 0xd9);
		
		/// <summary>
		/// DomainRole Entrada
		/// Description for Company.DSLBootstrap.FormularioHasEntrada.Entrada
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntrada/Entrada.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntrada/Entrada.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntrada/Entrada.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8271a773-b0d1-4d08-8e7b-c9526558d1d9")]
		public virtual Entrada Entrada
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entrada)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntradaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntradaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entrada of a Formulario
		/// <summary>
		/// Gets a list of Entrada.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entrada> GetEntrada(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entrada>, Entrada>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasEntrada links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntrada> GetLinksToEntrada ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntrada>(formularioInstance, global::Company.DSLBootstrap.FormularioHasEntrada.FormularioDomainRoleId);
		}
		#endregion
		#region Entrada link accessor
		/// <summary>
		/// Get the FormularioHasEntrada link to a Entrada.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntrada GetLinkToFormulario (global::Company.DSLBootstrap.Entrada entradaInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntrada> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntrada>(entradaInstance, global::Company.DSLBootstrap.FormularioHasEntrada.EntradaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entrada not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasEntrada instance accessors
		
		/// <summary>
		/// Get any FormularioHasEntrada links between a given Formulario and a Entrada.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntrada> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Entrada target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntrada> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntrada>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntrada> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntrada>(source, global::Company.DSLBootstrap.FormularioHasEntrada.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntrada link in links )
			{
				if ( target.Equals(link.Entrada) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasEntrada link between a given Formularioand a Entrada.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntrada GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Entrada target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntrada> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntrada>(source, global::Company.DSLBootstrap.FormularioHasEntrada.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntrada link in links )
			{
				if ( target.Equals(link.Entrada) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasEtiquetas
	/// Description for Company.DSLBootstrap.FormularioHasEtiquetas
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEtiquetas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEtiquetas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff39ba9f-4dc1-4017-8157-b2872354a22b")]
	public partial class FormularioHasEtiquetas : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasEtiquetas domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff39ba9f, 0x4dc1, 0x4017, 0x81, 0x57, 0xb2, 0x87, 0x23, 0x54, 0xa2, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasEtiquetas link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">Etiquetas to use as the target of the relationship.</param>
		public FormularioHasEtiquetas(Formulario source, Etiquetas target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasEtiquetas.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasEtiquetas.EtiquetasDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEtiquetas(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEtiquetas(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEtiquetas(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEtiquetas(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0xbaeda9e6, 0x0f47, 0x4af8, 0x81, 0xc4, 0x44, 0x68, 0x8e, 0xf8, 0x89, 0xdf);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasEtiquetas.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEtiquetas/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEtiquetas/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Etiquetas", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEtiquetas/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("baeda9e6-0f47-4af8-81c4-44688ef889df")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a Etiquetas
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(Etiquetas element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EtiquetasDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(Etiquetas element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EtiquetasDomainRoleId, newFormulario);
		}
		#endregion
		#region Etiquetas domain role code
		
		/// <summary>
		/// Etiquetas domain role Id.
		/// </summary>
		public static readonly global::System.Guid EtiquetasDomainRoleId = new global::System.Guid(0x10e66620, 0x173e, 0x44af, 0x86, 0x1d, 0x54, 0x3f, 0xd6, 0xbd, 0xfb, 0xb3);
		
		/// <summary>
		/// DomainRole Etiquetas
		/// Description for Company.DSLBootstrap.FormularioHasEtiquetas.Etiquetas
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEtiquetas/Etiquetas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEtiquetas/Etiquetas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEtiquetas/Etiquetas.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("10e66620-173e-44af-861d-543fd6bdfbb3")]
		public virtual Etiquetas Etiquetas
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Etiquetas)DslModeling::DomainRoleInfo.GetRolePlayer(this, EtiquetasDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EtiquetasDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Etiquetas of a Formulario
		/// <summary>
		/// Gets a list of Etiquetas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Etiquetas> GetEtiquetas(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Etiquetas>, Etiquetas>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasEtiquetas links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEtiquetas> GetLinksToEtiquetas ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEtiquetas>(formularioInstance, global::Company.DSLBootstrap.FormularioHasEtiquetas.FormularioDomainRoleId);
		}
		#endregion
		#region Etiquetas link accessor
		/// <summary>
		/// Get the FormularioHasEtiquetas link to a Etiquetas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEtiquetas GetLinkToFormulario (global::Company.DSLBootstrap.Etiquetas etiquetasInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEtiquetas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEtiquetas>(etiquetasInstance, global::Company.DSLBootstrap.FormularioHasEtiquetas.EtiquetasDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Etiquetas not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasEtiquetas instance accessors
		
		/// <summary>
		/// Get any FormularioHasEtiquetas links between a given Formulario and a Etiquetas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEtiquetas> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Etiquetas target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEtiquetas> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEtiquetas>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEtiquetas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEtiquetas>(source, global::Company.DSLBootstrap.FormularioHasEtiquetas.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEtiquetas link in links )
			{
				if ( target.Equals(link.Etiquetas) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasEtiquetas link between a given Formularioand a Etiquetas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEtiquetas GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Etiquetas target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEtiquetas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEtiquetas>(source, global::Company.DSLBootstrap.FormularioHasEtiquetas.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEtiquetas link in links )
			{
				if ( target.Equals(link.Etiquetas) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasBarradeprogreso
	/// Description for Company.DSLBootstrap.FormularioHasBarradeprogreso
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasBarradeprogreso.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasBarradeprogreso.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("60592da7-d30d-413e-aef2-113ae9b20d0b")]
	public partial class FormularioHasBarradeprogreso : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasBarradeprogreso domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60592da7, 0xd30d, 0x413e, 0xae, 0xf2, 0x11, 0x3a, 0xe9, 0xb2, 0x0d, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasBarradeprogreso link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">Barradeprogreso to use as the target of the relationship.</param>
		public FormularioHasBarradeprogreso(Formulario source, Barradeprogreso target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasBarradeprogreso.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasBarradeprogreso(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasBarradeprogreso(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasBarradeprogreso(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasBarradeprogreso(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x316e2eea, 0x5462, 0x4204, 0xaa, 0xa7, 0xb6, 0xc0, 0xe4, 0xf6, 0x6b, 0xed);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasBarradeprogreso.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasBarradeprogreso/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasBarradeprogreso/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Barradeprogreso", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasBarradeprogreso/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("316e2eea-5462-4204-aaa7-b6c0e4f66bed")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a Barradeprogreso
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(Barradeprogreso element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BarradeprogresoDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(Barradeprogreso element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BarradeprogresoDomainRoleId, newFormulario);
		}
		#endregion
		#region Barradeprogreso domain role code
		
		/// <summary>
		/// Barradeprogreso domain role Id.
		/// </summary>
		public static readonly global::System.Guid BarradeprogresoDomainRoleId = new global::System.Guid(0x22a5cf3c, 0x02db, 0x4c6b, 0xb1, 0x18, 0x68, 0xf9, 0x90, 0xc0, 0xf0, 0xf2);
		
		/// <summary>
		/// DomainRole Barradeprogreso
		/// Description for
		/// Company.DSLBootstrap.FormularioHasBarradeprogreso.Barradeprogreso
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasBarradeprogreso/Barradeprogreso.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasBarradeprogreso/Barradeprogreso.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasBarradeprogreso/Barradeprogreso.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("22a5cf3c-02db-4c6b-b118-68f990c0f0f2")]
		public virtual Barradeprogreso Barradeprogreso
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Barradeprogreso)DslModeling::DomainRoleInfo.GetRolePlayer(this, BarradeprogresoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BarradeprogresoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Barradeprogreso of a Formulario
		/// <summary>
		/// Gets a list of Barradeprogreso.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Barradeprogreso> GetBarradeprogreso(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Barradeprogreso>, Barradeprogreso>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasBarradeprogreso links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> GetLinksToBarradeprogreso ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasBarradeprogreso>(formularioInstance, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.FormularioDomainRoleId);
		}
		#endregion
		#region Barradeprogreso link accessor
		/// <summary>
		/// Get the FormularioHasBarradeprogreso link to a Barradeprogreso.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasBarradeprogreso GetLinkToFormulario (global::Company.DSLBootstrap.Barradeprogreso barradeprogresoInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasBarradeprogreso>(barradeprogresoInstance, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.BarradeprogresoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Barradeprogreso not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasBarradeprogreso instance accessors
		
		/// <summary>
		/// Get any FormularioHasBarradeprogreso links between a given Formulario and a Barradeprogreso.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Barradeprogreso target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasBarradeprogreso>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasBarradeprogreso>(source, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasBarradeprogreso link in links )
			{
				if ( target.Equals(link.Barradeprogreso) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasBarradeprogreso link between a given Formularioand a Barradeprogreso.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasBarradeprogreso GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Barradeprogreso target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasBarradeprogreso> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasBarradeprogreso>(source, global::Company.DSLBootstrap.FormularioHasBarradeprogreso.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasBarradeprogreso link in links )
			{
				if ( target.Equals(link.Barradeprogreso) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship PaginaWebHasInners
	/// Description for Company.DSLBootstrap.PaginaWebHasInners
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasInners.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasInners.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ce52b3e1-fec8-4771-a714-1e808c7de9b0")]
	public partial class PaginaWebHasInners : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PaginaWebHasInners domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce52b3e1, 0xfec8, 0x4771, 0xa7, 0x14, 0x1e, 0x80, 0x8c, 0x7d, 0xe9, 0xb0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PaginaWebHasInners link in the same Partition as the given PaginaWeb
		/// </summary>
		/// <param name="source">PaginaWeb to use as the source of the relationship.</param>
		/// <param name="target">Inner to use as the target of the relationship.</param>
		public PaginaWebHasInners(PaginaWeb source, Inner target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PaginaWebHasInners.PaginaWebDomainRoleId, source), new DslModeling::RoleAssignment(PaginaWebHasInners.InnerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasInners(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasInners(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasInners(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasInners(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PaginaWeb domain role code
		
		/// <summary>
		/// PaginaWeb domain role Id.
		/// </summary>
		public static readonly global::System.Guid PaginaWebDomainRoleId = new global::System.Guid(0xc99c85b3, 0x1a8c, 0x44b4, 0xa3, 0x6f, 0x8f, 0x4d, 0x26, 0xcb, 0xe9, 0x59);
		
		/// <summary>
		/// DomainRole PaginaWeb
		/// Description for Company.DSLBootstrap.PaginaWebHasInners.PaginaWeb
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasInners/PaginaWeb.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasInners/PaginaWeb.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Inners", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasInners/PaginaWeb.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c99c85b3-1a8c-44b4-a36f-8f4d26cbe959")]
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PaginaWeb)DslModeling::DomainRoleInfo.GetRolePlayer(this, PaginaWebDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PaginaWebDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PaginaWeb of a Inner
		/// <summary>
		/// Gets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PaginaWeb GetPaginaWeb(Inner element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InnerDomainRoleId) as PaginaWeb;
		}
		
		/// <summary>
		/// Sets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPaginaWeb(Inner element, PaginaWeb newPaginaWeb)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InnerDomainRoleId, newPaginaWeb);
		}
		#endregion
		#region Inner domain role code
		
		/// <summary>
		/// Inner domain role Id.
		/// </summary>
		public static readonly global::System.Guid InnerDomainRoleId = new global::System.Guid(0x1e7f3232, 0xa0f5, 0x4920, 0xba, 0x4f, 0x45, 0xf4, 0x4e, 0x5e, 0xdf, 0x64);
		
		/// <summary>
		/// DomainRole Inner
		/// Description for Company.DSLBootstrap.PaginaWebHasInners.Inner
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasInners/Inner.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasInners/Inner.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PaginaWeb", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasInners/Inner.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1e7f3232-a0f5-4920-ba4f-45f44e5edf64")]
		public virtual Inner Inner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Inner)DslModeling::DomainRoleInfo.GetRolePlayer(this, InnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Inners of a PaginaWeb
		/// <summary>
		/// Gets a list of Inners.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Inner> GetInners(PaginaWeb element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Inner>, Inner>(element, PaginaWebDomainRoleId);
		}
		#endregion
		#region PaginaWeb link accessor
		/// <summary>
		/// Get the list of PaginaWebHasInners links to a PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasInners> GetLinksToInners ( global::Company.DSLBootstrap.PaginaWeb paginaWebInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasInners>(paginaWebInstance, global::Company.DSLBootstrap.PaginaWebHasInners.PaginaWebDomainRoleId);
		}
		#endregion
		#region Inner link accessor
		/// <summary>
		/// Get the PaginaWebHasInners link to a Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasInners GetLinkToPaginaWeb (global::Company.DSLBootstrap.Inner innerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasInners> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasInners>(innerInstance, global::Company.DSLBootstrap.PaginaWebHasInners.InnerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Inner not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PaginaWebHasInners instance accessors
		
		/// <summary>
		/// Get any PaginaWebHasInners links between a given PaginaWeb and a Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasInners> GetLinks( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Inner target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasInners> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasInners>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasInners> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasInners>(source, global::Company.DSLBootstrap.PaginaWebHasInners.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasInners link in links )
			{
				if ( target.Equals(link.Inner) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PaginaWebHasInners link between a given PaginaWeband a Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasInners GetLink( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Inner target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasInners> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasInners>(source, global::Company.DSLBootstrap.PaginaWebHasInners.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasInners link in links )
			{
				if ( target.Equals(link.Inner) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasCheckBoxes
	/// Description for Company.DSLBootstrap.FormularioHasCheckBoxes
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasCheckBoxes.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasCheckBoxes.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5fafe01a-7bd7-4f62-9d6d-e0860f89da21")]
	public partial class FormularioHasCheckBoxes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasCheckBoxes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5fafe01a, 0x7bd7, 0x4f62, 0x9d, 0x6d, 0xe0, 0x86, 0x0f, 0x89, 0xda, 0x21);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasCheckBoxes link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">CheckBox to use as the target of the relationship.</param>
		public FormularioHasCheckBoxes(Formulario source, CheckBox target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasCheckBoxes.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasCheckBoxes.CheckBoxDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasCheckBoxes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasCheckBoxes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasCheckBoxes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasCheckBoxes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x50e6b8f5, 0x9b04, 0x463c, 0xb3, 0xc8, 0xbd, 0xe5, 0x7f, 0x28, 0x65, 0x0d);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasCheckBoxes.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasCheckBoxes/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasCheckBoxes/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CheckBoxes", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasCheckBoxes/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("50e6b8f5-9b04-463c-b3c8-bde57f28650d")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a CheckBox
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(CheckBox element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CheckBoxDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(CheckBox element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CheckBoxDomainRoleId, newFormulario);
		}
		#endregion
		#region CheckBox domain role code
		
		/// <summary>
		/// CheckBox domain role Id.
		/// </summary>
		public static readonly global::System.Guid CheckBoxDomainRoleId = new global::System.Guid(0x525fde33, 0xc6a1, 0x4a47, 0xad, 0x53, 0x42, 0x16, 0xb4, 0xc3, 0xc4, 0x9d);
		
		/// <summary>
		/// DomainRole CheckBox
		/// Description for Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBox
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasCheckBoxes/CheckBox.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasCheckBoxes/CheckBox.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasCheckBoxes/CheckBox.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("525fde33-c6a1-4a47-ad53-4216b4c3c49d")]
		public virtual CheckBox CheckBox
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CheckBox)DslModeling::DomainRoleInfo.GetRolePlayer(this, CheckBoxDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CheckBoxDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CheckBoxes of a Formulario
		/// <summary>
		/// Gets a list of CheckBoxes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CheckBox> GetCheckBoxes(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CheckBox>, CheckBox>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasCheckBoxes links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasCheckBoxes> GetLinksToCheckBoxes ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasCheckBoxes>(formularioInstance, global::Company.DSLBootstrap.FormularioHasCheckBoxes.FormularioDomainRoleId);
		}
		#endregion
		#region CheckBox link accessor
		/// <summary>
		/// Get the FormularioHasCheckBoxes link to a CheckBox.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasCheckBoxes GetLinkToFormulario (global::Company.DSLBootstrap.CheckBox checkBoxInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasCheckBoxes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasCheckBoxes>(checkBoxInstance, global::Company.DSLBootstrap.FormularioHasCheckBoxes.CheckBoxDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CheckBox not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasCheckBoxes instance accessors
		
		/// <summary>
		/// Get any FormularioHasCheckBoxes links between a given Formulario and a CheckBox.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasCheckBoxes> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.CheckBox target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasCheckBoxes> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasCheckBoxes>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasCheckBoxes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasCheckBoxes>(source, global::Company.DSLBootstrap.FormularioHasCheckBoxes.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasCheckBoxes link in links )
			{
				if ( target.Equals(link.CheckBox) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasCheckBoxes link between a given Formularioand a CheckBox.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasCheckBoxes GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.CheckBox target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasCheckBoxes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasCheckBoxes>(source, global::Company.DSLBootstrap.FormularioHasCheckBoxes.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasCheckBoxes link in links )
			{
				if ( target.Equals(link.CheckBox) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship PaginaWebHasTables
	/// Description for Company.DSLBootstrap.PaginaWebHasTables
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasTables.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasTables.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c13808fc-134d-476b-96c4-1cecde68c690")]
	public partial class PaginaWebHasTables : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PaginaWebHasTables domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc13808fc, 0x134d, 0x476b, 0x96, 0xc4, 0x1c, 0xec, 0xde, 0x68, 0xc6, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PaginaWebHasTables link in the same Partition as the given PaginaWeb
		/// </summary>
		/// <param name="source">PaginaWeb to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public PaginaWebHasTables(PaginaWeb source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PaginaWebHasTables.PaginaWebDomainRoleId, source), new DslModeling::RoleAssignment(PaginaWebHasTables.TableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasTables(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasTables(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PaginaWebHasTables(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PaginaWebHasTables(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PaginaWeb domain role code
		
		/// <summary>
		/// PaginaWeb domain role Id.
		/// </summary>
		public static readonly global::System.Guid PaginaWebDomainRoleId = new global::System.Guid(0x28ebb976, 0xfa1d, 0x4143, 0x83, 0xad, 0x7d, 0xd3, 0xb0, 0x58, 0x43, 0xad);
		
		/// <summary>
		/// DomainRole PaginaWeb
		/// Description for Company.DSLBootstrap.PaginaWebHasTables.PaginaWeb
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasTables/PaginaWeb.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasTables/PaginaWeb.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tables", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasTables/PaginaWeb.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("28ebb976-fa1d-4143-83ad-7dd3b05843ad")]
		public virtual PaginaWeb PaginaWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PaginaWeb)DslModeling::DomainRoleInfo.GetRolePlayer(this, PaginaWebDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PaginaWebDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PaginaWeb of a Table
		/// <summary>
		/// Gets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PaginaWeb GetPaginaWeb(Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as PaginaWeb;
		}
		
		/// <summary>
		/// Sets PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPaginaWeb(Table element, PaginaWeb newPaginaWeb)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newPaginaWeb);
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x8446a256, 0xc000, 0x4572, 0xa3, 0xdc, 0xff, 0x24, 0x3b, 0x25, 0xf5, 0x55);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Company.DSLBootstrap.PaginaWebHasTables.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.PaginaWebHasTables/Table.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.PaginaWebHasTables/Table.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PaginaWeb", PropertyDisplayNameKey="Company.DSLBootstrap.PaginaWebHasTables/Table.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8446a256-c000-4572-a3dc-ff243b25f555")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tables of a PaginaWeb
		/// <summary>
		/// Gets a list of Tables.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetTables(PaginaWeb element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Table>, Table>(element, PaginaWebDomainRoleId);
		}
		#endregion
		#region PaginaWeb link accessor
		/// <summary>
		/// Get the list of PaginaWebHasTables links to a PaginaWeb.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasTables> GetLinksToTables ( global::Company.DSLBootstrap.PaginaWeb paginaWebInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasTables>(paginaWebInstance, global::Company.DSLBootstrap.PaginaWebHasTables.PaginaWebDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the PaginaWebHasTables link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasTables GetLinkToPaginaWeb (global::Company.DSLBootstrap.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasTables>(tableInstance, global::Company.DSLBootstrap.PaginaWebHasTables.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PaginaWebHasTables instance accessors
		
		/// <summary>
		/// Get any PaginaWebHasTables links between a given PaginaWeb and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.PaginaWebHasTables> GetLinks( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Table target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasTables> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.PaginaWebHasTables>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasTables>(source, global::Company.DSLBootstrap.PaginaWebHasTables.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasTables link in links )
			{
				if ( target.Equals(link.Table) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PaginaWebHasTables link between a given PaginaWeband a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.PaginaWebHasTables GetLink( global::Company.DSLBootstrap.PaginaWeb source, global::Company.DSLBootstrap.Table target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.PaginaWebHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.PaginaWebHasTables>(source, global::Company.DSLBootstrap.PaginaWebHasTables.PaginaWebDomainRoleId);
			foreach ( global::Company.DSLBootstrap.PaginaWebHasTables link in links )
			{
				if ( target.Equals(link.Table) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship InnerHasEditItems
	/// Description for Company.DSLBootstrap.InnerHasEditItems
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.InnerHasEditItems.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.InnerHasEditItems.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d712810e-f9a9-46d0-a793-116994022084")]
	public partial class InnerHasEditItems : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InnerHasEditItems domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd712810e, 0xf9a9, 0x46d0, 0xa7, 0x93, 0x11, 0x69, 0x94, 0x02, 0x20, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InnerHasEditItems link in the same Partition as the given Inner
		/// </summary>
		/// <param name="source">Inner to use as the source of the relationship.</param>
		/// <param name="target">EditItem to use as the target of the relationship.</param>
		public InnerHasEditItems(Inner source, EditItem target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InnerHasEditItems.InnerDomainRoleId, source), new DslModeling::RoleAssignment(InnerHasEditItems.EditItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InnerHasEditItems(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InnerHasEditItems(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InnerHasEditItems(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InnerHasEditItems(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Inner domain role code
		
		/// <summary>
		/// Inner domain role Id.
		/// </summary>
		public static readonly global::System.Guid InnerDomainRoleId = new global::System.Guid(0xbee19ff8, 0x0b51, 0x477d, 0xb2, 0xc2, 0x30, 0xb3, 0x2d, 0x5f, 0x67, 0xa4);
		
		/// <summary>
		/// DomainRole Inner
		/// Description for Company.DSLBootstrap.InnerHasEditItems.Inner
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.InnerHasEditItems/Inner.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.InnerHasEditItems/Inner.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EditItems", PropertyDisplayNameKey="Company.DSLBootstrap.InnerHasEditItems/Inner.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bee19ff8-0b51-477d-b2c2-30b32d5f67a4")]
		public virtual Inner Inner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Inner)DslModeling::DomainRoleInfo.GetRolePlayer(this, InnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Inner of a EditItem
		/// <summary>
		/// Gets Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Inner GetInner(EditItem element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EditItemDomainRoleId) as Inner;
		}
		
		/// <summary>
		/// Sets Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInner(EditItem element, Inner newInner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EditItemDomainRoleId, newInner);
		}
		#endregion
		#region EditItem domain role code
		
		/// <summary>
		/// EditItem domain role Id.
		/// </summary>
		public static readonly global::System.Guid EditItemDomainRoleId = new global::System.Guid(0xbd0567c9, 0x6120, 0x46e6, 0xab, 0xbe, 0x9e, 0x7b, 0x91, 0x19, 0x88, 0xbe);
		
		/// <summary>
		/// DomainRole EditItem
		/// Description for Company.DSLBootstrap.InnerHasEditItems.EditItem
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.InnerHasEditItems/EditItem.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.InnerHasEditItems/EditItem.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Inner", PropertyDisplayNameKey="Company.DSLBootstrap.InnerHasEditItems/EditItem.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bd0567c9-6120-46e6-abbe-9e7b911988be")]
		public virtual EditItem EditItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EditItem)DslModeling::DomainRoleInfo.GetRolePlayer(this, EditItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EditItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EditItems of a Inner
		/// <summary>
		/// Gets a list of EditItems.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EditItem> GetEditItems(Inner element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EditItem>, EditItem>(element, InnerDomainRoleId);
		}
		#endregion
		#region Inner link accessor
		/// <summary>
		/// Get the list of InnerHasEditItems links to a Inner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.InnerHasEditItems> GetLinksToEditItems ( global::Company.DSLBootstrap.Inner innerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.InnerHasEditItems>(innerInstance, global::Company.DSLBootstrap.InnerHasEditItems.InnerDomainRoleId);
		}
		#endregion
		#region EditItem link accessor
		/// <summary>
		/// Get the InnerHasEditItems link to a EditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.InnerHasEditItems GetLinkToInner (global::Company.DSLBootstrap.EditItem editItemInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.InnerHasEditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.InnerHasEditItems>(editItemInstance, global::Company.DSLBootstrap.InnerHasEditItems.EditItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EditItem not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InnerHasEditItems instance accessors
		
		/// <summary>
		/// Get any InnerHasEditItems links between a given Inner and a EditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.InnerHasEditItems> GetLinks( global::Company.DSLBootstrap.Inner source, global::Company.DSLBootstrap.EditItem target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.InnerHasEditItems> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.InnerHasEditItems>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.InnerHasEditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.InnerHasEditItems>(source, global::Company.DSLBootstrap.InnerHasEditItems.InnerDomainRoleId);
			foreach ( global::Company.DSLBootstrap.InnerHasEditItems link in links )
			{
				if ( target.Equals(link.EditItem) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InnerHasEditItems link between a given Innerand a EditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.InnerHasEditItems GetLink( global::Company.DSLBootstrap.Inner source, global::Company.DSLBootstrap.EditItem target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.InnerHasEditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.InnerHasEditItems>(source, global::Company.DSLBootstrap.InnerHasEditItems.InnerDomainRoleId);
			foreach ( global::Company.DSLBootstrap.InnerHasEditItems link in links )
			{
				if ( target.Equals(link.EditItem) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship TableHasRenglones
	/// Description for Company.DSLBootstrap.TableHasRenglones
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasRenglones.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasRenglones.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5cd29fc7-66fb-4d64-9c50-4d7e9c68556c")]
	public partial class TableHasRenglones : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableHasRenglones domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5cd29fc7, 0x66fb, 0x4d64, 0x9c, 0x50, 0x4d, 0x7e, 0x9c, 0x68, 0x55, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableHasRenglones link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Renglones to use as the target of the relationship.</param>
		public TableHasRenglones(Table source, Renglones target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableHasRenglones.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableHasRenglones.RenglonesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasRenglones(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasRenglones(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasRenglones(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasRenglones(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x5c1900da, 0x6e19, 0x4a43, 0xa0, 0xf8, 0xcf, 0xc0, 0x47, 0xc2, 0x37, 0xaa);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Company.DSLBootstrap.TableHasRenglones.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasRenglones/Table.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasRenglones/Table.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Renglones", PropertyDisplayNameKey="Company.DSLBootstrap.TableHasRenglones/Table.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5c1900da-6e19-4a43-a0f8-cfc047c237aa")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Renglones
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Renglones element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RenglonesDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Renglones element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RenglonesDomainRoleId, newTable);
		}
		#endregion
		#region Renglones domain role code
		
		/// <summary>
		/// Renglones domain role Id.
		/// </summary>
		public static readonly global::System.Guid RenglonesDomainRoleId = new global::System.Guid(0x6878a3ec, 0x72b2, 0x461b, 0x8c, 0x3a, 0x65, 0x93, 0x4c, 0xa1, 0xb8, 0x52);
		
		/// <summary>
		/// DomainRole Renglones
		/// Description for Company.DSLBootstrap.TableHasRenglones.Renglones
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasRenglones/Renglones.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasRenglones/Renglones.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Company.DSLBootstrap.TableHasRenglones/Renglones.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6878a3ec-72b2-461b-8c3a-65934ca1b852")]
		public virtual Renglones Renglones
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Renglones)DslModeling::DomainRoleInfo.GetRolePlayer(this, RenglonesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RenglonesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Renglones of a Table
		/// <summary>
		/// Gets a list of Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Renglones> GetRenglones(Table element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Renglones>, Renglones>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableHasRenglones links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.TableHasRenglones> GetLinksToRenglones ( global::Company.DSLBootstrap.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasRenglones>(tableInstance, global::Company.DSLBootstrap.TableHasRenglones.TableDomainRoleId);
		}
		#endregion
		#region Renglones link accessor
		/// <summary>
		/// Get the TableHasRenglones link to a Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.TableHasRenglones GetLinkToTable (global::Company.DSLBootstrap.Renglones renglonesInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasRenglones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasRenglones>(renglonesInstance, global::Company.DSLBootstrap.TableHasRenglones.RenglonesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Renglones not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableHasRenglones instance accessors
		
		/// <summary>
		/// Get any TableHasRenglones links between a given Table and a Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.TableHasRenglones> GetLinks( global::Company.DSLBootstrap.Table source, global::Company.DSLBootstrap.Renglones target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.TableHasRenglones> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.TableHasRenglones>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasRenglones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasRenglones>(source, global::Company.DSLBootstrap.TableHasRenglones.TableDomainRoleId);
			foreach ( global::Company.DSLBootstrap.TableHasRenglones link in links )
			{
				if ( target.Equals(link.Renglones) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableHasRenglones link between a given Tableand a Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.TableHasRenglones GetLink( global::Company.DSLBootstrap.Table source, global::Company.DSLBootstrap.Renglones target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasRenglones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasRenglones>(source, global::Company.DSLBootstrap.TableHasRenglones.TableDomainRoleId);
			foreach ( global::Company.DSLBootstrap.TableHasRenglones link in links )
			{
				if ( target.Equals(link.Renglones) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasRadioButtons
	/// Description for Company.DSLBootstrap.FormularioHasRadioButtons
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasRadioButtons.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasRadioButtons.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("68cc1edd-f966-4ca7-93b3-5cda8de04f2c")]
	public partial class FormularioHasRadioButtons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasRadioButtons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68cc1edd, 0xf966, 0x4ca7, 0x93, 0xb3, 0x5c, 0xda, 0x8d, 0xe0, 0x4f, 0x2c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasRadioButtons link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">RadioButton to use as the target of the relationship.</param>
		public FormularioHasRadioButtons(Formulario source, RadioButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasRadioButtons.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasRadioButtons.RadioButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasRadioButtons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasRadioButtons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasRadioButtons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasRadioButtons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0xbdf750cb, 0xe475, 0x420e, 0x81, 0x0d, 0x6c, 0xd9, 0xd7, 0xc6, 0x3b, 0x26);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasRadioButtons.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasRadioButtons/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasRadioButtons/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RadioButtons", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasRadioButtons/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bdf750cb-e475-420e-810d-6cd9d7c63b26")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a RadioButton
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(RadioButton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RadioButtonDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(RadioButton element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RadioButtonDomainRoleId, newFormulario);
		}
		#endregion
		#region RadioButton domain role code
		
		/// <summary>
		/// RadioButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid RadioButtonDomainRoleId = new global::System.Guid(0x99fa8669, 0x26fa, 0x409b, 0xbc, 0xdd, 0xb6, 0x0f, 0x39, 0x3e, 0x89, 0x2d);
		
		/// <summary>
		/// DomainRole RadioButton
		/// Description for Company.DSLBootstrap.FormularioHasRadioButtons.RadioButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasRadioButtons/RadioButton.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasRadioButtons/RadioButton.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasRadioButtons/RadioButton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("99fa8669-26fa-409b-bcdd-b60f393e892d")]
		public virtual RadioButton RadioButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RadioButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, RadioButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RadioButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RadioButtons of a Formulario
		/// <summary>
		/// Gets a list of RadioButtons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RadioButton> GetRadioButtons(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RadioButton>, RadioButton>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasRadioButtons links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasRadioButtons> GetLinksToRadioButtons ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasRadioButtons>(formularioInstance, global::Company.DSLBootstrap.FormularioHasRadioButtons.FormularioDomainRoleId);
		}
		#endregion
		#region RadioButton link accessor
		/// <summary>
		/// Get the FormularioHasRadioButtons link to a RadioButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasRadioButtons GetLinkToFormulario (global::Company.DSLBootstrap.RadioButton radioButtonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasRadioButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasRadioButtons>(radioButtonInstance, global::Company.DSLBootstrap.FormularioHasRadioButtons.RadioButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RadioButton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasRadioButtons instance accessors
		
		/// <summary>
		/// Get any FormularioHasRadioButtons links between a given Formulario and a RadioButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasRadioButtons> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.RadioButton target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasRadioButtons> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasRadioButtons>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasRadioButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasRadioButtons>(source, global::Company.DSLBootstrap.FormularioHasRadioButtons.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasRadioButtons link in links )
			{
				if ( target.Equals(link.RadioButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasRadioButtons link between a given Formularioand a RadioButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasRadioButtons GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.RadioButton target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasRadioButtons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasRadioButtons>(source, global::Company.DSLBootstrap.FormularioHasRadioButtons.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasRadioButtons link in links )
			{
				if ( target.Equals(link.RadioButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasTextRows
	/// Description for Company.DSLBootstrap.FormularioHasTextRows
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasTextRows.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasTextRows.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("11ca96e1-6869-41fa-81c3-14f44d67a1f2")]
	public partial class FormularioHasTextRows : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasTextRows domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11ca96e1, 0x6869, 0x41fa, 0x81, 0xc3, 0x14, 0xf4, 0x4d, 0x67, 0xa1, 0xf2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasTextRows link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">TextRow to use as the target of the relationship.</param>
		public FormularioHasTextRows(Formulario source, TextRow target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasTextRows.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasTextRows.TextRowDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasTextRows(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasTextRows(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasTextRows(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasTextRows(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x23d2c94a, 0x8e11, 0x4e11, 0xb9, 0xef, 0x53, 0x05, 0x3d, 0x90, 0x35, 0x00);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasTextRows.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasTextRows/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasTextRows/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TextRows", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasTextRows/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("23d2c94a-8e11-4e11-b9ef-53053d903500")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a TextRow
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(TextRow element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TextRowDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(TextRow element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TextRowDomainRoleId, newFormulario);
		}
		#endregion
		#region TextRow domain role code
		
		/// <summary>
		/// TextRow domain role Id.
		/// </summary>
		public static readonly global::System.Guid TextRowDomainRoleId = new global::System.Guid(0x05fab822, 0x4c9a, 0x4901, 0xb5, 0xdd, 0x95, 0xd6, 0x2f, 0xa1, 0xa5, 0x3e);
		
		/// <summary>
		/// DomainRole TextRow
		/// Description for Company.DSLBootstrap.FormularioHasTextRows.TextRow
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasTextRows/TextRow.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasTextRows/TextRow.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasTextRows/TextRow.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("05fab822-4c9a-4901-b5dd-95d62fa1a53e")]
		public virtual TextRow TextRow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TextRow)DslModeling::DomainRoleInfo.GetRolePlayer(this, TextRowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TextRowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TextRows of a Formulario
		/// <summary>
		/// Gets a list of TextRows.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TextRow> GetTextRows(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TextRow>, TextRow>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasTextRows links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasTextRows> GetLinksToTextRows ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasTextRows>(formularioInstance, global::Company.DSLBootstrap.FormularioHasTextRows.FormularioDomainRoleId);
		}
		#endregion
		#region TextRow link accessor
		/// <summary>
		/// Get the FormularioHasTextRows link to a TextRow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasTextRows GetLinkToFormulario (global::Company.DSLBootstrap.TextRow textRowInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasTextRows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasTextRows>(textRowInstance, global::Company.DSLBootstrap.FormularioHasTextRows.TextRowDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TextRow not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasTextRows instance accessors
		
		/// <summary>
		/// Get any FormularioHasTextRows links between a given Formulario and a TextRow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasTextRows> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.TextRow target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasTextRows> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasTextRows>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasTextRows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasTextRows>(source, global::Company.DSLBootstrap.FormularioHasTextRows.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasTextRows link in links )
			{
				if ( target.Equals(link.TextRow) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasTextRows link between a given Formularioand a TextRow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasTextRows GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.TextRow target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasTextRows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasTextRows>(source, global::Company.DSLBootstrap.FormularioHasTextRows.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasTextRows link in links )
			{
				if ( target.Equals(link.TextRow) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasSelecting
	/// Description for Company.DSLBootstrap.FormularioHasSelecting
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasSelecting.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasSelecting.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c36d1393-0b79-4e77-a523-148328d957a2")]
	public partial class FormularioHasSelecting : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasSelecting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc36d1393, 0x0b79, 0x4e77, 0xa5, 0x23, 0x14, 0x83, 0x28, 0xd9, 0x57, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasSelecting link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">Select to use as the target of the relationship.</param>
		public FormularioHasSelecting(Formulario source, Select target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasSelecting.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasSelecting.SelectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasSelecting(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasSelecting(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasSelecting(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasSelecting(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0xa808ae08, 0xb983, 0x42a6, 0xa2, 0xe6, 0xe4, 0x71, 0xcc, 0x79, 0x4e, 0x9f);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasSelecting.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasSelecting/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasSelecting/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Selecting", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasSelecting/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a808ae08-b983-42a6-a2e6-e471cc794e9f")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a Select
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(Select element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SelectDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(Select element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SelectDomainRoleId, newFormulario);
		}
		#endregion
		#region Select domain role code
		
		/// <summary>
		/// Select domain role Id.
		/// </summary>
		public static readonly global::System.Guid SelectDomainRoleId = new global::System.Guid(0xa5223fab, 0xc3ed, 0x477e, 0x80, 0x9b, 0x1c, 0xd2, 0x39, 0xd1, 0x15, 0x32);
		
		/// <summary>
		/// DomainRole Select
		/// Description for Company.DSLBootstrap.FormularioHasSelecting.Select
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasSelecting/Select.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasSelecting/Select.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasSelecting/Select.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a5223fab-c3ed-477e-809b-1cd239d11532")]
		public virtual Select Select
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Select)DslModeling::DomainRoleInfo.GetRolePlayer(this, SelectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SelectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Selecting of a Formulario
		/// <summary>
		/// Gets a list of Selecting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Select> GetSelecting(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Select>, Select>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasSelecting links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasSelecting> GetLinksToSelecting ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasSelecting>(formularioInstance, global::Company.DSLBootstrap.FormularioHasSelecting.FormularioDomainRoleId);
		}
		#endregion
		#region Select link accessor
		/// <summary>
		/// Get the FormularioHasSelecting link to a Select.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasSelecting GetLinkToFormulario (global::Company.DSLBootstrap.Select selectInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasSelecting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasSelecting>(selectInstance, global::Company.DSLBootstrap.FormularioHasSelecting.SelectDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Select not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasSelecting instance accessors
		
		/// <summary>
		/// Get any FormularioHasSelecting links between a given Formulario and a Select.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasSelecting> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Select target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasSelecting> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasSelecting>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasSelecting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasSelecting>(source, global::Company.DSLBootstrap.FormularioHasSelecting.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasSelecting link in links )
			{
				if ( target.Equals(link.Select) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasSelecting link between a given Formularioand a Select.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasSelecting GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.Select target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasSelecting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasSelecting>(source, global::Company.DSLBootstrap.FormularioHasSelecting.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasSelecting link in links )
			{
				if ( target.Equals(link.Select) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship TableHasColumnas
	/// Description for Company.DSLBootstrap.TableHasColumnas
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasColumnas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasColumnas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("532193a2-15dd-4ab1-825e-77ea0d96fa05")]
	public partial class TableHasColumnas : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableHasColumnas domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x532193a2, 0x15dd, 0x4ab1, 0x82, 0x5e, 0x77, 0xea, 0x0d, 0x96, 0xfa, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableHasColumnas link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">Columnas to use as the target of the relationship.</param>
		public TableHasColumnas(Table source, Columnas target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableHasColumnas.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableHasColumnas.ColumnasDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasColumnas(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasColumnas(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableHasColumnas(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableHasColumnas(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0x5f75b8fa, 0x40f1, 0x4ad5, 0xb3, 0xe1, 0xae, 0x39, 0xbe, 0x53, 0xb6, 0xbf);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Company.DSLBootstrap.TableHasColumnas.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasColumnas/Table.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasColumnas/Table.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Columnas", PropertyDisplayNameKey="Company.DSLBootstrap.TableHasColumnas/Table.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5f75b8fa-40f1-4ad5-b3e1-ae39be53b6bf")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a Columnas
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Table GetTable(Columnas element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnasDomainRoleId) as Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(Columnas element, Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnasDomainRoleId, newTable);
		}
		#endregion
		#region Columnas domain role code
		
		/// <summary>
		/// Columnas domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnasDomainRoleId = new global::System.Guid(0x0a25bc75, 0xb6be, 0x4621, 0xa3, 0xd7, 0x36, 0xb0, 0xc7, 0xd2, 0x9d, 0x13);
		
		/// <summary>
		/// DomainRole Columnas
		/// Description for Company.DSLBootstrap.TableHasColumnas.Columnas
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.TableHasColumnas/Columnas.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.TableHasColumnas/Columnas.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="Company.DSLBootstrap.TableHasColumnas/Columnas.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0a25bc75-b6be-4621-a3d7-36b0c7d29d13")]
		public virtual Columnas Columnas
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Columnas)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnasDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnasDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columnas of a Table
		/// <summary>
		/// Gets a list of Columnas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Columnas> GetColumnas(Table element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Columnas>, Columnas>(element, TableDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableHasColumnas links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.TableHasColumnas> GetLinksToColumnas ( global::Company.DSLBootstrap.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasColumnas>(tableInstance, global::Company.DSLBootstrap.TableHasColumnas.TableDomainRoleId);
		}
		#endregion
		#region Columnas link accessor
		/// <summary>
		/// Get the TableHasColumnas link to a Columnas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.TableHasColumnas GetLinkToTable (global::Company.DSLBootstrap.Columnas columnasInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasColumnas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasColumnas>(columnasInstance, global::Company.DSLBootstrap.TableHasColumnas.ColumnasDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Columnas not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableHasColumnas instance accessors
		
		/// <summary>
		/// Get any TableHasColumnas links between a given Table and a Columnas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.TableHasColumnas> GetLinks( global::Company.DSLBootstrap.Table source, global::Company.DSLBootstrap.Columnas target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.TableHasColumnas> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.TableHasColumnas>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasColumnas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasColumnas>(source, global::Company.DSLBootstrap.TableHasColumnas.TableDomainRoleId);
			foreach ( global::Company.DSLBootstrap.TableHasColumnas link in links )
			{
				if ( target.Equals(link.Columnas) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableHasColumnas link between a given Tableand a Columnas.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.TableHasColumnas GetLink( global::Company.DSLBootstrap.Table source, global::Company.DSLBootstrap.Columnas target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.TableHasColumnas> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.TableHasColumnas>(source, global::Company.DSLBootstrap.TableHasColumnas.TableDomainRoleId);
			foreach ( global::Company.DSLBootstrap.TableHasColumnas link in links )
			{
				if ( target.Equals(link.Columnas) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship RenglonesHasColumnaRenglon
	/// Description for Company.DSLBootstrap.RenglonesHasColumnaRenglon
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("67cca392-f023-4a9d-a41b-b612550031a7")]
	public partial class RenglonesHasColumnaRenglon : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RenglonesHasColumnaRenglon domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67cca392, 0xf023, 0x4a9d, 0xa4, 0x1b, 0xb6, 0x12, 0x55, 0x00, 0x31, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RenglonesHasColumnaRenglon link in the same Partition as the given Renglones
		/// </summary>
		/// <param name="source">Renglones to use as the source of the relationship.</param>
		/// <param name="target">ColumnaRenglon to use as the target of the relationship.</param>
		public RenglonesHasColumnaRenglon(Renglones source, ColumnaRenglon target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RenglonesHasColumnaRenglon.RenglonesDomainRoleId, source), new DslModeling::RoleAssignment(RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RenglonesHasColumnaRenglon(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RenglonesHasColumnaRenglon(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RenglonesHasColumnaRenglon(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RenglonesHasColumnaRenglon(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Renglones domain role code
		
		/// <summary>
		/// Renglones domain role Id.
		/// </summary>
		public static readonly global::System.Guid RenglonesDomainRoleId = new global::System.Guid(0x9d22917c, 0x6e09, 0x4dac, 0xa0, 0xde, 0x4a, 0x7f, 0x57, 0x18, 0xac, 0x8b);
		
		/// <summary>
		/// DomainRole Renglones
		/// Description for Company.DSLBootstrap.RenglonesHasColumnaRenglon.Renglones
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon/Renglones.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon/Renglones.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ColumnaRenglon", PropertyDisplayNameKey="Company.DSLBootstrap.RenglonesHasColumnaRenglon/Renglones.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d22917c-6e09-4dac-a0de-4a7f5718ac8b")]
		public virtual Renglones Renglones
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Renglones)DslModeling::DomainRoleInfo.GetRolePlayer(this, RenglonesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RenglonesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Renglones of a ColumnaRenglon
		/// <summary>
		/// Gets Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Renglones GetRenglones(ColumnaRenglon element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnaRenglonDomainRoleId) as Renglones;
		}
		
		/// <summary>
		/// Sets Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRenglones(ColumnaRenglon element, Renglones newRenglones)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnaRenglonDomainRoleId, newRenglones);
		}
		#endregion
		#region ColumnaRenglon domain role code
		
		/// <summary>
		/// ColumnaRenglon domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnaRenglonDomainRoleId = new global::System.Guid(0xd8eb8d46, 0x506d, 0x4585, 0x84, 0x12, 0x5b, 0x20, 0xda, 0xa6, 0xb0, 0xa4);
		
		/// <summary>
		/// DomainRole ColumnaRenglon
		/// Description for Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglon
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon/ColumnaRenglon.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.RenglonesHasColumnaRenglon/ColumnaRenglon.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Renglones", PropertyDisplayNameKey="Company.DSLBootstrap.RenglonesHasColumnaRenglon/ColumnaRenglon.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d8eb8d46-506d-4585-8412-5b20daa6b0a4")]
		public virtual ColumnaRenglon ColumnaRenglon
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ColumnaRenglon)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnaRenglonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnaRenglonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ColumnaRenglon of a Renglones
		/// <summary>
		/// Gets a list of ColumnaRenglon.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ColumnaRenglon> GetColumnaRenglon(Renglones element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ColumnaRenglon>, ColumnaRenglon>(element, RenglonesDomainRoleId);
		}
		#endregion
		#region Renglones link accessor
		/// <summary>
		/// Get the list of RenglonesHasColumnaRenglon links to a Renglones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> GetLinksToColumnaRenglon ( global::Company.DSLBootstrap.Renglones renglonesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon>(renglonesInstance, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.RenglonesDomainRoleId);
		}
		#endregion
		#region ColumnaRenglon link accessor
		/// <summary>
		/// Get the RenglonesHasColumnaRenglon link to a ColumnaRenglon.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.RenglonesHasColumnaRenglon GetLinkToRenglones (global::Company.DSLBootstrap.ColumnaRenglon columnaRenglonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon>(columnaRenglonInstance, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.ColumnaRenglonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ColumnaRenglon not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RenglonesHasColumnaRenglon instance accessors
		
		/// <summary>
		/// Get any RenglonesHasColumnaRenglon links between a given Renglones and a ColumnaRenglon.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> GetLinks( global::Company.DSLBootstrap.Renglones source, global::Company.DSLBootstrap.ColumnaRenglon target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon>(source, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.RenglonesDomainRoleId);
			foreach ( global::Company.DSLBootstrap.RenglonesHasColumnaRenglon link in links )
			{
				if ( target.Equals(link.ColumnaRenglon) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RenglonesHasColumnaRenglon link between a given Renglonesand a ColumnaRenglon.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.RenglonesHasColumnaRenglon GetLink( global::Company.DSLBootstrap.Renglones source, global::Company.DSLBootstrap.ColumnaRenglon target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.RenglonesHasColumnaRenglon>(source, global::Company.DSLBootstrap.RenglonesHasColumnaRenglon.RenglonesDomainRoleId);
			foreach ( global::Company.DSLBootstrap.RenglonesHasColumnaRenglon link in links )
			{
				if ( target.Equals(link.ColumnaRenglon) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasButtonDangers
	/// Description for Company.DSLBootstrap.FormularioHasButtonDangers
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonDangers.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonDangers.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a2e45943-0a07-41ce-bcd1-ef9fa329286a")]
	public partial class FormularioHasButtonDangers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasButtonDangers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2e45943, 0x0a07, 0x41ce, 0xbc, 0xd1, 0xef, 0x9f, 0xa3, 0x29, 0x28, 0x6a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasButtonDangers link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">ButtonDanger to use as the target of the relationship.</param>
		public FormularioHasButtonDangers(Formulario source, ButtonDanger target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasButtonDangers.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasButtonDangers.ButtonDangerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonDangers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonDangers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonDangers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonDangers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x03562e9b, 0x6bbd, 0x44e4, 0x90, 0xee, 0x58, 0x44, 0xc7, 0x5f, 0xfd, 0x04);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasButtonDangers.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonDangers/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonDangers/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ButtonDangers", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonDangers/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("03562e9b-6bbd-44e4-90ee-5844c75ffd04")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a ButtonDanger
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(ButtonDanger element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonDangerDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(ButtonDanger element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonDangerDomainRoleId, newFormulario);
		}
		#endregion
		#region ButtonDanger domain role code
		
		/// <summary>
		/// ButtonDanger domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonDangerDomainRoleId = new global::System.Guid(0x9989a6cb, 0x2dc7, 0x420b, 0x92, 0xc9, 0x7c, 0xda, 0x7e, 0x89, 0xcd, 0x47);
		
		/// <summary>
		/// DomainRole ButtonDanger
		/// Description for Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDanger
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonDangers/ButtonDanger.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonDangers/ButtonDanger.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonDangers/ButtonDanger.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9989a6cb-2dc7-420b-92c9-7cda7e89cd47")]
		public virtual ButtonDanger ButtonDanger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ButtonDanger)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonDangerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonDangerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ButtonDangers of a Formulario
		/// <summary>
		/// Gets a list of ButtonDangers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ButtonDanger> GetButtonDangers(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonDanger>, ButtonDanger>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasButtonDangers links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonDangers> GetLinksToButtonDangers ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonDangers>(formularioInstance, global::Company.DSLBootstrap.FormularioHasButtonDangers.FormularioDomainRoleId);
		}
		#endregion
		#region ButtonDanger link accessor
		/// <summary>
		/// Get the FormularioHasButtonDangers link to a ButtonDanger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonDangers GetLinkToFormulario (global::Company.DSLBootstrap.ButtonDanger buttonDangerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonDangers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonDangers>(buttonDangerInstance, global::Company.DSLBootstrap.FormularioHasButtonDangers.ButtonDangerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ButtonDanger not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasButtonDangers instance accessors
		
		/// <summary>
		/// Get any FormularioHasButtonDangers links between a given Formulario and a ButtonDanger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonDangers> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonDanger target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonDangers> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonDangers>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonDangers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonDangers>(source, global::Company.DSLBootstrap.FormularioHasButtonDangers.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonDangers link in links )
			{
				if ( target.Equals(link.ButtonDanger) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasButtonDangers link between a given Formularioand a ButtonDanger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonDangers GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonDanger target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonDangers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonDangers>(source, global::Company.DSLBootstrap.FormularioHasButtonDangers.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonDangers link in links )
			{
				if ( target.Equals(link.ButtonDanger) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasButtonInfo
	/// Description for Company.DSLBootstrap.FormularioHasButtonInfo
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonInfo.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonInfo.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f0366a2c-a885-4c31-97ca-e119b17e2b3e")]
	public partial class FormularioHasButtonInfo : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasButtonInfo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf0366a2c, 0xa885, 0x4c31, 0x97, 0xca, 0xe1, 0x19, 0xb1, 0x7e, 0x2b, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasButtonInfo link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">ButtonInfo to use as the target of the relationship.</param>
		public FormularioHasButtonInfo(Formulario source, ButtonInfo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasButtonInfo.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasButtonInfo.ButtonInfoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonInfo(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonInfo(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonInfo(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonInfo(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x7a45548b, 0x0c5b, 0x43e1, 0x83, 0xe9, 0xb8, 0x54, 0x09, 0x33, 0xdd, 0xa0);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasButtonInfo.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonInfo/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonInfo/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ButtonInfo", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonInfo/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7a45548b-0c5b-43e1-83e9-b8540933dda0")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a ButtonInfo
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(ButtonInfo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonInfoDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(ButtonInfo element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonInfoDomainRoleId, newFormulario);
		}
		#endregion
		#region ButtonInfo domain role code
		
		/// <summary>
		/// ButtonInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonInfoDomainRoleId = new global::System.Guid(0xd7db6701, 0x4298, 0x4b6c, 0x8b, 0xef, 0xc8, 0xc2, 0xa7, 0xce, 0x9b, 0xc0);
		
		/// <summary>
		/// DomainRole ButtonInfo
		/// Description for Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonInfo/ButtonInfo.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonInfo/ButtonInfo.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonInfo/ButtonInfo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d7db6701-4298-4b6c-8bef-c8c2a7ce9bc0")]
		public virtual ButtonInfo ButtonInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ButtonInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ButtonInfo of a Formulario
		/// <summary>
		/// Gets a list of ButtonInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ButtonInfo> GetButtonInfo(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonInfo>, ButtonInfo>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasButtonInfo links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonInfo> GetLinksToButtonInfo ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonInfo>(formularioInstance, global::Company.DSLBootstrap.FormularioHasButtonInfo.FormularioDomainRoleId);
		}
		#endregion
		#region ButtonInfo link accessor
		/// <summary>
		/// Get the FormularioHasButtonInfo link to a ButtonInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonInfo GetLinkToFormulario (global::Company.DSLBootstrap.ButtonInfo buttonInfoInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonInfo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonInfo>(buttonInfoInstance, global::Company.DSLBootstrap.FormularioHasButtonInfo.ButtonInfoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ButtonInfo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasButtonInfo instance accessors
		
		/// <summary>
		/// Get any FormularioHasButtonInfo links between a given Formulario and a ButtonInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonInfo> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonInfo target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonInfo> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonInfo>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonInfo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonInfo>(source, global::Company.DSLBootstrap.FormularioHasButtonInfo.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonInfo link in links )
			{
				if ( target.Equals(link.ButtonInfo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasButtonInfo link between a given Formularioand a ButtonInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonInfo GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonInfo target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonInfo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonInfo>(source, global::Company.DSLBootstrap.FormularioHasButtonInfo.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonInfo link in links )
			{
				if ( target.Equals(link.ButtonInfo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasButtonPrimaries
	/// Description for Company.DSLBootstrap.FormularioHasButtonPrimaries
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonPrimaries.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonPrimaries.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("87253d7a-9e8b-4d59-bdfd-8a234cd2ab51")]
	public partial class FormularioHasButtonPrimaries : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasButtonPrimaries domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x87253d7a, 0x9e8b, 0x4d59, 0xbd, 0xfd, 0x8a, 0x23, 0x4c, 0xd2, 0xab, 0x51);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasButtonPrimaries link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">ButtonPrimary to use as the target of the relationship.</param>
		public FormularioHasButtonPrimaries(Formulario source, ButtonPrimary target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasButtonPrimaries.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonPrimaries(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonPrimaries(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonPrimaries(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonPrimaries(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0xcc949964, 0x76c7, 0x454e, 0x97, 0xcf, 0x3b, 0x17, 0xd9, 0xd4, 0xdb, 0x6f);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasButtonPrimaries.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonPrimaries/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonPrimaries/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ButtonPrimaries", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonPrimaries/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc949964-76c7-454e-97cf-3b17d9d4db6f")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a ButtonPrimary
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(ButtonPrimary element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonPrimaryDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(ButtonPrimary element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonPrimaryDomainRoleId, newFormulario);
		}
		#endregion
		#region ButtonPrimary domain role code
		
		/// <summary>
		/// ButtonPrimary domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonPrimaryDomainRoleId = new global::System.Guid(0xa0e4358e, 0xf8ee, 0x4b34, 0x85, 0x05, 0xd2, 0xe1, 0xc6, 0xbd, 0x4b, 0xd5);
		
		/// <summary>
		/// DomainRole ButtonPrimary
		/// Description for Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimary
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonPrimaries/ButtonPrimary.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonPrimaries/ButtonPrimary.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonPrimaries/ButtonPrimary.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a0e4358e-f8ee-4b34-8505-d2e1c6bd4bd5")]
		public virtual ButtonPrimary ButtonPrimary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ButtonPrimary)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonPrimaryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonPrimaryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ButtonPrimaries of a Formulario
		/// <summary>
		/// Gets a list of ButtonPrimaries.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ButtonPrimary> GetButtonPrimaries(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonPrimary>, ButtonPrimary>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasButtonPrimaries links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> GetLinksToButtonPrimaries ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonPrimaries>(formularioInstance, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.FormularioDomainRoleId);
		}
		#endregion
		#region ButtonPrimary link accessor
		/// <summary>
		/// Get the FormularioHasButtonPrimaries link to a ButtonPrimary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonPrimaries GetLinkToFormulario (global::Company.DSLBootstrap.ButtonPrimary buttonPrimaryInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonPrimaries>(buttonPrimaryInstance, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.ButtonPrimaryDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ButtonPrimary not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasButtonPrimaries instance accessors
		
		/// <summary>
		/// Get any FormularioHasButtonPrimaries links between a given Formulario and a ButtonPrimary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonPrimary target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonPrimaries>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonPrimaries>(source, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonPrimaries link in links )
			{
				if ( target.Equals(link.ButtonPrimary) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasButtonPrimaries link between a given Formularioand a ButtonPrimary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonPrimaries GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonPrimary target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonPrimaries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonPrimaries>(source, global::Company.DSLBootstrap.FormularioHasButtonPrimaries.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonPrimaries link in links )
			{
				if ( target.Equals(link.ButtonPrimary) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasButtonWarnings
	/// Description for Company.DSLBootstrap.FormularioHasButtonWarnings
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonWarnings.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonWarnings.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f7116402-ec68-4978-b537-4a4b37a5304e")]
	public partial class FormularioHasButtonWarnings : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasButtonWarnings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf7116402, 0xec68, 0x4978, 0xb5, 0x37, 0x4a, 0x4b, 0x37, 0xa5, 0x30, 0x4e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasButtonWarnings link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">ButtonWarning to use as the target of the relationship.</param>
		public FormularioHasButtonWarnings(Formulario source, ButtonWarning target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasButtonWarnings.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasButtonWarnings.ButtonWarningDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonWarnings(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonWarnings(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonWarnings(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonWarnings(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x54500bd5, 0x5988, 0x40c3, 0x9f, 0xf3, 0xba, 0xcb, 0xd1, 0x63, 0xb7, 0x5d);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasButtonWarnings.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonWarnings/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonWarnings/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ButtonWarnings", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonWarnings/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("54500bd5-5988-40c3-9ff3-bacbd163b75d")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a ButtonWarning
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(ButtonWarning element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonWarningDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(ButtonWarning element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonWarningDomainRoleId, newFormulario);
		}
		#endregion
		#region ButtonWarning domain role code
		
		/// <summary>
		/// ButtonWarning domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonWarningDomainRoleId = new global::System.Guid(0xd14f40e8, 0x6f58, 0x4a30, 0x98, 0xae, 0x5b, 0x4b, 0x2e, 0x4b, 0x1c, 0x5c);
		
		/// <summary>
		/// DomainRole ButtonWarning
		/// Description for Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarning
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonWarnings/ButtonWarning.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonWarnings/ButtonWarning.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonWarnings/ButtonWarning.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d14f40e8-6f58-4a30-98ae-5b4b2e4b1c5c")]
		public virtual ButtonWarning ButtonWarning
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ButtonWarning)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonWarningDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonWarningDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ButtonWarnings of a Formulario
		/// <summary>
		/// Gets a list of ButtonWarnings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ButtonWarning> GetButtonWarnings(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonWarning>, ButtonWarning>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasButtonWarnings links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonWarnings> GetLinksToButtonWarnings ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonWarnings>(formularioInstance, global::Company.DSLBootstrap.FormularioHasButtonWarnings.FormularioDomainRoleId);
		}
		#endregion
		#region ButtonWarning link accessor
		/// <summary>
		/// Get the FormularioHasButtonWarnings link to a ButtonWarning.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonWarnings GetLinkToFormulario (global::Company.DSLBootstrap.ButtonWarning buttonWarningInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonWarnings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonWarnings>(buttonWarningInstance, global::Company.DSLBootstrap.FormularioHasButtonWarnings.ButtonWarningDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ButtonWarning not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasButtonWarnings instance accessors
		
		/// <summary>
		/// Get any FormularioHasButtonWarnings links between a given Formulario and a ButtonWarning.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonWarnings> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonWarning target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonWarnings> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonWarnings>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonWarnings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonWarnings>(source, global::Company.DSLBootstrap.FormularioHasButtonWarnings.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonWarnings link in links )
			{
				if ( target.Equals(link.ButtonWarning) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasButtonWarnings link between a given Formularioand a ButtonWarning.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonWarnings GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonWarning target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonWarnings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonWarnings>(source, global::Company.DSLBootstrap.FormularioHasButtonWarnings.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonWarnings link in links )
			{
				if ( target.Equals(link.ButtonWarning) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasButtonSuccesses
	/// Description for Company.DSLBootstrap.FormularioHasButtonSuccesses
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonSuccesses.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonSuccesses.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0c3c68ea-1d8f-4ae4-8526-7c01e551a433")]
	public partial class FormularioHasButtonSuccesses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasButtonSuccesses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c3c68ea, 0x1d8f, 0x4ae4, 0x85, 0x26, 0x7c, 0x01, 0xe5, 0x51, 0xa4, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasButtonSuccesses link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">ButtonSuccess to use as the target of the relationship.</param>
		public FormularioHasButtonSuccesses(Formulario source, ButtonSuccess target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasButtonSuccesses.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonSuccesses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonSuccesses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasButtonSuccesses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasButtonSuccesses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0xebfef42a, 0x422e, 0x45de, 0xa9, 0xa9, 0xb8, 0x02, 0xe9, 0xd3, 0x13, 0x69);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasButtonSuccesses.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonSuccesses/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonSuccesses/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ButtonSuccesses", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonSuccesses/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ebfef42a-422e-45de-a9a9-b802e9d31369")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a ButtonSuccess
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(ButtonSuccess element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonSuccessDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(ButtonSuccess element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonSuccessDomainRoleId, newFormulario);
		}
		#endregion
		#region ButtonSuccess domain role code
		
		/// <summary>
		/// ButtonSuccess domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonSuccessDomainRoleId = new global::System.Guid(0xc763d9c6, 0xfb01, 0x465d, 0x91, 0x0f, 0x67, 0x21, 0x08, 0xdd, 0x83, 0x98);
		
		/// <summary>
		/// DomainRole ButtonSuccess
		/// Description for Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccess
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasButtonSuccesses/ButtonSuccess.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasButtonSuccesses/ButtonSuccess.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasButtonSuccesses/ButtonSuccess.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c763d9c6-fb01-465d-910f-672108dd8398")]
		public virtual ButtonSuccess ButtonSuccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ButtonSuccess)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonSuccessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonSuccessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ButtonSuccesses of a Formulario
		/// <summary>
		/// Gets a list of ButtonSuccesses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ButtonSuccess> GetButtonSuccesses(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ButtonSuccess>, ButtonSuccess>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasButtonSuccesses links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> GetLinksToButtonSuccesses ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonSuccesses>(formularioInstance, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.FormularioDomainRoleId);
		}
		#endregion
		#region ButtonSuccess link accessor
		/// <summary>
		/// Get the FormularioHasButtonSuccesses link to a ButtonSuccess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonSuccesses GetLinkToFormulario (global::Company.DSLBootstrap.ButtonSuccess buttonSuccessInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonSuccesses>(buttonSuccessInstance, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.ButtonSuccessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ButtonSuccess not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasButtonSuccesses instance accessors
		
		/// <summary>
		/// Get any FormularioHasButtonSuccesses links between a given Formulario and a ButtonSuccess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonSuccess target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasButtonSuccesses>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonSuccesses>(source, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonSuccesses link in links )
			{
				if ( target.Equals(link.ButtonSuccess) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasButtonSuccesses link between a given Formularioand a ButtonSuccess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasButtonSuccesses GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.ButtonSuccess target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasButtonSuccesses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasButtonSuccesses>(source, global::Company.DSLBootstrap.FormularioHasButtonSuccesses.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasButtonSuccesses link in links )
			{
				if ( target.Equals(link.ButtonSuccess) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasEntradaEmails
	/// Description for Company.DSLBootstrap.FormularioHasEntradaEmails
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaEmails.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaEmails.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bd395778-716e-4850-a8db-5cb0b7894550")]
	public partial class FormularioHasEntradaEmails : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasEntradaEmails domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbd395778, 0x716e, 0x4850, 0xa8, 0xdb, 0x5c, 0xb0, 0xb7, 0x89, 0x45, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasEntradaEmails link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">EntradaEmail to use as the target of the relationship.</param>
		public FormularioHasEntradaEmails(Formulario source, EntradaEmail target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasEntradaEmails.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasEntradaEmails.EntradaEmailDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntradaEmails(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntradaEmails(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntradaEmails(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntradaEmails(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x68bd3eea, 0x8108, 0x48a5, 0x85, 0xfa, 0x7d, 0x67, 0x7e, 0x31, 0xa2, 0x0b);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasEntradaEmails.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaEmails/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaEmails/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntradaEmails", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntradaEmails/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("68bd3eea-8108-48a5-85fa-7d677e31a20b")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a EntradaEmail
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(EntradaEmail element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntradaEmailDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(EntradaEmail element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntradaEmailDomainRoleId, newFormulario);
		}
		#endregion
		#region EntradaEmail domain role code
		
		/// <summary>
		/// EntradaEmail domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntradaEmailDomainRoleId = new global::System.Guid(0x94f48066, 0xe60d, 0x4f70, 0xa5, 0xad, 0x71, 0x42, 0x73, 0x78, 0xe2, 0x1c);
		
		/// <summary>
		/// DomainRole EntradaEmail
		/// Description for Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmail
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaEmails/EntradaEmail.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaEmails/EntradaEmail.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntradaEmails/EntradaEmail.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("94f48066-e60d-4f70-a5ad-71427378e21c")]
		public virtual EntradaEmail EntradaEmail
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntradaEmail)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntradaEmailDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntradaEmailDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntradaEmails of a Formulario
		/// <summary>
		/// Gets a list of EntradaEmails.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntradaEmail> GetEntradaEmails(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntradaEmail>, EntradaEmail>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasEntradaEmails links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntradaEmails> GetLinksToEntradaEmails ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaEmails>(formularioInstance, global::Company.DSLBootstrap.FormularioHasEntradaEmails.FormularioDomainRoleId);
		}
		#endregion
		#region EntradaEmail link accessor
		/// <summary>
		/// Get the FormularioHasEntradaEmails link to a EntradaEmail.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntradaEmails GetLinkToFormulario (global::Company.DSLBootstrap.EntradaEmail entradaEmailInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaEmails> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaEmails>(entradaEmailInstance, global::Company.DSLBootstrap.FormularioHasEntradaEmails.EntradaEmailDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntradaEmail not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasEntradaEmails instance accessors
		
		/// <summary>
		/// Get any FormularioHasEntradaEmails links between a given Formulario and a EntradaEmail.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntradaEmails> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EntradaEmail target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntradaEmails> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntradaEmails>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaEmails> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaEmails>(source, global::Company.DSLBootstrap.FormularioHasEntradaEmails.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntradaEmails link in links )
			{
				if ( target.Equals(link.EntradaEmail) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasEntradaEmails link between a given Formularioand a EntradaEmail.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntradaEmails GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EntradaEmail target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaEmails> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaEmails>(source, global::Company.DSLBootstrap.FormularioHasEntradaEmails.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntradaEmails link in links )
			{
				if ( target.Equals(link.EntradaEmail) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.DSLBootstrap
{
	/// <summary>
	/// DomainRelationship FormularioHasEntradaPasswords
	/// Description for Company.DSLBootstrap.FormularioHasEntradaPasswords
	/// </summary>
	[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaPasswords.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaPasswords.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e53976ea-a19f-42b4-8da4-47a242811774")]
	public partial class FormularioHasEntradaPasswords : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FormularioHasEntradaPasswords domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe53976ea, 0xa19f, 0x42b4, 0x8d, 0xa4, 0x47, 0xa2, 0x42, 0x81, 0x17, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FormularioHasEntradaPasswords link in the same Partition as the given Formulario
		/// </summary>
		/// <param name="source">Formulario to use as the source of the relationship.</param>
		/// <param name="target">EntradaPassword to use as the target of the relationship.</param>
		public FormularioHasEntradaPasswords(Formulario source, EntradaPassword target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FormularioHasEntradaPasswords.FormularioDomainRoleId, source), new DslModeling::RoleAssignment(FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntradaPasswords(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntradaPasswords(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FormularioHasEntradaPasswords(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FormularioHasEntradaPasswords(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Formulario domain role code
		
		/// <summary>
		/// Formulario domain role Id.
		/// </summary>
		public static readonly global::System.Guid FormularioDomainRoleId = new global::System.Guid(0x4b7ca848, 0x0c57, 0x45a7, 0x8d, 0xbe, 0x2b, 0xc9, 0x7c, 0xda, 0xa5, 0x9c);
		
		/// <summary>
		/// DomainRole Formulario
		/// Description for Company.DSLBootstrap.FormularioHasEntradaPasswords.Formulario
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaPasswords/Formulario.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaPasswords/Formulario.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntradaPasswords", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntradaPasswords/Formulario.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4b7ca848-0c57-45a7-8dbe-2bc97cdaa59c")]
		public virtual Formulario Formulario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Formulario)DslModeling::DomainRoleInfo.GetRolePlayer(this, FormularioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FormularioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Formulario of a EntradaPassword
		/// <summary>
		/// Gets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Formulario GetFormulario(EntradaPassword element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntradaPasswordDomainRoleId) as Formulario;
		}
		
		/// <summary>
		/// Sets Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFormulario(EntradaPassword element, Formulario newFormulario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntradaPasswordDomainRoleId, newFormulario);
		}
		#endregion
		#region EntradaPassword domain role code
		
		/// <summary>
		/// EntradaPassword domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntradaPasswordDomainRoleId = new global::System.Guid(0x3c4c1289, 0xdf72, 0x4d04, 0x89, 0x03, 0xb1, 0x9c, 0x90, 0xed, 0x77, 0xcd);
		
		/// <summary>
		/// DomainRole EntradaPassword
		/// Description for
		/// Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPassword
		/// </summary>
		[DslDesign::DisplayNameResource("Company.DSLBootstrap.FormularioHasEntradaPasswords/EntradaPassword.DisplayName", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.DSLBootstrap.FormularioHasEntradaPasswords/EntradaPassword.Description", typeof(global::Company.DSLBootstrap.DSLBootstrapDomainModel), "Company.DSLBootstrap.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Formulario", PropertyDisplayNameKey="Company.DSLBootstrap.FormularioHasEntradaPasswords/EntradaPassword.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c4c1289-df72-4d04-8903-b19c90ed77cd")]
		public virtual EntradaPassword EntradaPassword
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntradaPassword)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntradaPasswordDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntradaPasswordDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntradaPasswords of a Formulario
		/// <summary>
		/// Gets a list of EntradaPasswords.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntradaPassword> GetEntradaPasswords(Formulario element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntradaPassword>, EntradaPassword>(element, FormularioDomainRoleId);
		}
		#endregion
		#region Formulario link accessor
		/// <summary>
		/// Get the list of FormularioHasEntradaPasswords links to a Formulario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> GetLinksToEntradaPasswords ( global::Company.DSLBootstrap.Formulario formularioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaPasswords>(formularioInstance, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.FormularioDomainRoleId);
		}
		#endregion
		#region EntradaPassword link accessor
		/// <summary>
		/// Get the FormularioHasEntradaPasswords link to a EntradaPassword.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntradaPasswords GetLinkToFormulario (global::Company.DSLBootstrap.EntradaPassword entradaPasswordInstance)
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaPasswords>(entradaPasswordInstance, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.EntradaPasswordDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntradaPassword not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FormularioHasEntradaPasswords instance accessors
		
		/// <summary>
		/// Get any FormularioHasEntradaPasswords links between a given Formulario and a EntradaPassword.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> GetLinks( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EntradaPassword target )
		{
			global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> outLinks = new global::System.Collections.Generic.List<global::Company.DSLBootstrap.FormularioHasEntradaPasswords>();
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaPasswords>(source, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntradaPasswords link in links )
			{
				if ( target.Equals(link.EntradaPassword) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FormularioHasEntradaPasswords link between a given Formularioand a EntradaPassword.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.DSLBootstrap.FormularioHasEntradaPasswords GetLink( global::Company.DSLBootstrap.Formulario source, global::Company.DSLBootstrap.EntradaPassword target )
		{
			global::System.Collections.Generic.IList<global::Company.DSLBootstrap.FormularioHasEntradaPasswords> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.DSLBootstrap.FormularioHasEntradaPasswords>(source, global::Company.DSLBootstrap.FormularioHasEntradaPasswords.FormularioDomainRoleId);
			foreach ( global::Company.DSLBootstrap.FormularioHasEntradaPasswords link in links )
			{
				if ( target.Equals(link.EntradaPassword) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
